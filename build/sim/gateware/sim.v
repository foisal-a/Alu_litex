// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 519b4119
// Date       : 2022-10-19 13:18:41
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
	output wire sim_trace,
	input  wire sys_clk,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  main_int_rst = 1'd1;
reg  main_soc_rst = 1'd0;
wire main_cpu_rst;
reg  [1:0] main_reset_storage = 2'd0;
reg  main_reset_re = 1'd0;
reg  [31:0] main_scratch_storage = 32'd305419896;
reg  main_scratch_re = 1'd0;
wire [31:0] main_bus_errors_status;
wire main_bus_errors_we;
reg  main_bus_errors_re = 1'd0;
wire main_bus_error;
reg  [31:0] main_bus_errors = 32'd0;
wire main_reset;
reg  [31:0] main_interrupt = 32'd0;
wire [29:0] main_ibus_adr;
wire [31:0] main_ibus_dat_w;
wire [31:0] main_ibus_dat_r;
wire [3:0] main_ibus_sel;
wire main_ibus_cyc;
wire main_ibus_stb;
wire main_ibus_ack;
wire main_ibus_we;
wire [2:0] main_ibus_cti;
wire [1:0] main_ibus_bte;
wire main_ibus_err;
wire [29:0] main_dbus_adr;
wire [31:0] main_dbus_dat_w;
wire [31:0] main_dbus_dat_r;
wire [3:0] main_dbus_sel;
wire main_dbus_cyc;
wire main_dbus_stb;
wire main_dbus_ack;
wire main_dbus_we;
wire [2:0] main_dbus_cti;
wire [1:0] main_dbus_bte;
wire main_dbus_err;
reg  [31:0] main_vexriscv = 32'd0;
wire [29:0] main_simsoc_ram_bus_adr;
wire [31:0] main_simsoc_ram_bus_dat_w;
wire [31:0] main_simsoc_ram_bus_dat_r;
wire [3:0] main_simsoc_ram_bus_sel;
wire main_simsoc_ram_bus_cyc;
wire main_simsoc_ram_bus_stb;
reg  main_simsoc_ram_bus_ack = 1'd0;
wire main_simsoc_ram_bus_we;
wire [2:0] main_simsoc_ram_bus_cti;
wire [1:0] main_simsoc_ram_bus_bte;
reg  main_simsoc_ram_bus_err = 1'd0;
reg  main_simsoc_adr_burst = 1'd0;
wire [14:0] main_simsoc_adr;
wire [31:0] main_simsoc_dat_r;
wire [29:0] main_ram_bus_ram_bus_adr;
wire [31:0] main_ram_bus_ram_bus_dat_w;
wire [31:0] main_ram_bus_ram_bus_dat_r;
wire [3:0] main_ram_bus_ram_bus_sel;
wire main_ram_bus_ram_bus_cyc;
wire main_ram_bus_ram_bus_stb;
reg  main_ram_bus_ram_bus_ack = 1'd0;
wire main_ram_bus_ram_bus_we;
wire [2:0] main_ram_bus_ram_bus_cti;
wire [1:0] main_ram_bus_ram_bus_bte;
reg  main_ram_bus_ram_bus_err = 1'd0;
reg  main_ram_adr_burst = 1'd0;
wire [10:0] main_ram_adr;
wire [31:0] main_ram_dat_r;
reg  [3:0] main_ram_we = 4'd0;
wire [31:0] main_ram_dat_w;
wire main_sink_valid;
wire main_sink_ready;
wire main_sink_first;
wire main_sink_last;
wire [7:0] main_sink_payload_data;
wire main_source_valid;
wire main_source_ready;
reg  main_source_first = 1'd0;
reg  main_source_last = 1'd0;
wire [7:0] main_source_payload_data;
reg  main_uart_rxtx_re = 1'd0;
wire [7:0] main_uart_rxtx_r;
reg  main_uart_rxtx_we = 1'd0;
wire [7:0] main_uart_rxtx_w;
wire main_uart_txfull_status;
wire main_uart_txfull_we;
reg  main_uart_txfull_re = 1'd0;
wire main_uart_rxempty_status;
wire main_uart_rxempty_we;
reg  main_uart_rxempty_re = 1'd0;
wire main_uart_irq;
wire main_uart_tx_status;
reg  main_uart_tx_pending = 1'd0;
wire main_uart_tx_trigger;
reg  main_uart_tx_clear = 1'd0;
reg  main_uart_tx_trigger_d = 1'd0;
wire main_uart_rx_status;
reg  main_uart_rx_pending = 1'd0;
wire main_uart_rx_trigger;
reg  main_uart_rx_clear = 1'd0;
reg  main_uart_rx_trigger_d = 1'd0;
wire main_uart_tx0;
wire main_uart_rx0;
reg  [1:0] main_uart_status_status = 2'd0;
wire main_uart_status_we;
reg  main_uart_status_re = 1'd0;
wire main_uart_tx1;
wire main_uart_rx1;
reg  [1:0] main_uart_pending_status = 2'd0;
wire main_uart_pending_we;
reg  main_uart_pending_re = 1'd0;
reg  [1:0] main_uart_pending_r = 2'd0;
wire main_uart_tx2;
wire main_uart_rx2;
reg  [1:0] main_uart_enable_storage = 2'd0;
reg  main_uart_enable_re = 1'd0;
wire main_uart_txempty_status;
wire main_uart_txempty_we;
reg  main_uart_txempty_re = 1'd0;
wire main_uart_rxfull_status;
wire main_uart_rxfull_we;
reg  main_uart_rxfull_re = 1'd0;
wire main_uart_uart_sink_valid;
wire main_uart_uart_sink_ready;
wire main_uart_uart_sink_first;
wire main_uart_uart_sink_last;
wire [7:0] main_uart_uart_sink_payload_data;
wire main_uart_uart_source_valid;
wire main_uart_uart_source_ready;
wire main_uart_uart_source_first;
wire main_uart_uart_source_last;
wire [7:0] main_uart_uart_source_payload_data;
wire main_uart_tx_fifo_sink_valid;
wire main_uart_tx_fifo_sink_ready;
reg  main_uart_tx_fifo_sink_first = 1'd0;
reg  main_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] main_uart_tx_fifo_sink_payload_data;
wire main_uart_tx_fifo_source_valid;
wire main_uart_tx_fifo_source_ready;
wire main_uart_tx_fifo_source_first;
wire main_uart_tx_fifo_source_last;
wire [7:0] main_uart_tx_fifo_source_payload_data;
wire main_uart_tx_fifo_re;
reg  main_uart_tx_fifo_readable = 1'd0;
wire main_uart_tx_fifo_syncfifo_we;
wire main_uart_tx_fifo_syncfifo_writable;
wire main_uart_tx_fifo_syncfifo_re;
wire main_uart_tx_fifo_syncfifo_readable;
wire [9:0] main_uart_tx_fifo_syncfifo_din;
wire [9:0] main_uart_tx_fifo_syncfifo_dout;
reg  [4:0] main_uart_tx_fifo_level0 = 5'd0;
reg  main_uart_tx_fifo_replace = 1'd0;
reg  [3:0] main_uart_tx_fifo_produce = 4'd0;
reg  [3:0] main_uart_tx_fifo_consume = 4'd0;
reg  [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_tx_fifo_wrport_dat_r;
wire main_uart_tx_fifo_wrport_we;
wire [9:0] main_uart_tx_fifo_wrport_dat_w;
wire main_uart_tx_fifo_do_read;
wire [3:0] main_uart_tx_fifo_rdport_adr;
wire [9:0] main_uart_tx_fifo_rdport_dat_r;
wire main_uart_tx_fifo_rdport_re;
wire [4:0] main_uart_tx_fifo_level1;
wire [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire main_uart_tx_fifo_fifo_in_first;
wire main_uart_tx_fifo_fifo_in_last;
wire [7:0] main_uart_tx_fifo_fifo_out_payload_data;
wire main_uart_tx_fifo_fifo_out_first;
wire main_uart_tx_fifo_fifo_out_last;
wire main_uart_rx_fifo_sink_valid;
wire main_uart_rx_fifo_sink_ready;
wire main_uart_rx_fifo_sink_first;
wire main_uart_rx_fifo_sink_last;
wire [7:0] main_uart_rx_fifo_sink_payload_data;
wire main_uart_rx_fifo_source_valid;
wire main_uart_rx_fifo_source_ready;
wire main_uart_rx_fifo_source_first;
wire main_uart_rx_fifo_source_last;
wire [7:0] main_uart_rx_fifo_source_payload_data;
wire main_uart_rx_fifo_re;
reg  main_uart_rx_fifo_readable = 1'd0;
wire main_uart_rx_fifo_syncfifo_we;
wire main_uart_rx_fifo_syncfifo_writable;
wire main_uart_rx_fifo_syncfifo_re;
wire main_uart_rx_fifo_syncfifo_readable;
wire [9:0] main_uart_rx_fifo_syncfifo_din;
wire [9:0] main_uart_rx_fifo_syncfifo_dout;
reg  [4:0] main_uart_rx_fifo_level0 = 5'd0;
reg  main_uart_rx_fifo_replace = 1'd0;
reg  [3:0] main_uart_rx_fifo_produce = 4'd0;
reg  [3:0] main_uart_rx_fifo_consume = 4'd0;
reg  [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_rx_fifo_wrport_dat_r;
wire main_uart_rx_fifo_wrport_we;
wire [9:0] main_uart_rx_fifo_wrport_dat_w;
wire main_uart_rx_fifo_do_read;
wire [3:0] main_uart_rx_fifo_rdport_adr;
wire [9:0] main_uart_rx_fifo_rdport_dat_r;
wire main_uart_rx_fifo_rdport_re;
wire [4:0] main_uart_rx_fifo_level1;
wire [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire main_uart_rx_fifo_fifo_in_first;
wire main_uart_rx_fifo_fifo_in_last;
wire [7:0] main_uart_rx_fifo_fifo_out_payload_data;
wire main_uart_rx_fifo_fifo_out_first;
wire main_uart_rx_fifo_fifo_out_last;
reg  [31:0] main_timer_load_storage = 32'd0;
reg  main_timer_load_re = 1'd0;
reg  [31:0] main_timer_reload_storage = 32'd0;
reg  main_timer_reload_re = 1'd0;
reg  main_timer_en_storage = 1'd0;
reg  main_timer_en_re = 1'd0;
reg  main_timer_update_value_storage = 1'd0;
reg  main_timer_update_value_re = 1'd0;
reg  [31:0] main_timer_value_status = 32'd0;
wire main_timer_value_we;
reg  main_timer_value_re = 1'd0;
wire main_timer_irq;
wire main_timer_zero_status;
reg  main_timer_zero_pending = 1'd0;
wire main_timer_zero_trigger;
reg  main_timer_zero_clear = 1'd0;
reg  main_timer_zero_trigger_d = 1'd0;
wire main_timer_zero0;
wire main_timer_status_status;
wire main_timer_status_we;
reg  main_timer_status_re = 1'd0;
wire main_timer_zero1;
wire main_timer_pending_status;
wire main_timer_pending_we;
reg  main_timer_pending_re = 1'd0;
reg  main_timer_pending_r = 1'd0;
wire main_timer_zero2;
reg  main_timer_enable_storage = 1'd0;
reg  main_timer_enable_re = 1'd0;
reg  [31:0] main_timer_value = 32'd0;
wire [12:0] main_dfi_p0_address;
wire [1:0] main_dfi_p0_bank;
wire main_dfi_p0_cas_n;
wire main_dfi_p0_cs_n;
wire main_dfi_p0_ras_n;
wire main_dfi_p0_we_n;
wire main_dfi_p0_cke;
wire main_dfi_p0_odt;
wire main_dfi_p0_reset_n;
wire main_dfi_p0_act_n;
wire [31:0] main_dfi_p0_wrdata;
wire main_dfi_p0_wrdata_en;
wire [3:0] main_dfi_p0_wrdata_mask;
wire main_dfi_p0_rddata_en;
wire [31:0] main_dfi_p0_rddata;
wire main_dfi_p0_rddata_valid;
reg  main_activate = 1'd0;
reg  main_precharge = 1'd0;
reg  main_write = 1'd0;
reg  main_read = 1'd0;
reg  main_bankmodel0_activate = 1'd0;
reg  [12:0] main_bankmodel0_activate_row = 13'd0;
reg  main_bankmodel0_precharge = 1'd0;
wire main_bankmodel0_write;
wire [8:0] main_bankmodel0_write_col;
wire [31:0] main_bankmodel0_write_data;
wire [3:0] main_bankmodel0_write_mask;
reg  main_bankmodel0_read = 1'd0;
reg  [8:0] main_bankmodel0_read_col = 9'd0;
reg  [31:0] main_bankmodel0_read_data = 32'd0;
reg  main_bankmodel0_active = 1'd0;
reg  [12:0] main_bankmodel0_row = 13'd0;
reg  [21:0] main_bankmodel0_write_port_adr = 22'd0;
wire [31:0] main_bankmodel0_write_port_dat_r;
reg  [3:0] main_bankmodel0_write_port_we = 4'd0;
reg  [31:0] main_bankmodel0_write_port_dat_w = 32'd0;
reg  [21:0] main_bankmodel0_read_port_adr = 22'd0;
wire [31:0] main_bankmodel0_read_port_dat_r;
wire [21:0] main_bankmodel0_wraddr;
wire [21:0] main_bankmodel0_rdaddr;
reg  main_bankmodel1_activate = 1'd0;
reg  [12:0] main_bankmodel1_activate_row = 13'd0;
reg  main_bankmodel1_precharge = 1'd0;
wire main_bankmodel1_write;
wire [8:0] main_bankmodel1_write_col;
wire [31:0] main_bankmodel1_write_data;
wire [3:0] main_bankmodel1_write_mask;
reg  main_bankmodel1_read = 1'd0;
reg  [8:0] main_bankmodel1_read_col = 9'd0;
reg  [31:0] main_bankmodel1_read_data = 32'd0;
reg  main_bankmodel1_active = 1'd0;
reg  [12:0] main_bankmodel1_row = 13'd0;
reg  [21:0] main_bankmodel1_write_port_adr = 22'd0;
wire [31:0] main_bankmodel1_write_port_dat_r;
reg  [3:0] main_bankmodel1_write_port_we = 4'd0;
reg  [31:0] main_bankmodel1_write_port_dat_w = 32'd0;
reg  [21:0] main_bankmodel1_read_port_adr = 22'd0;
wire [31:0] main_bankmodel1_read_port_dat_r;
wire [21:0] main_bankmodel1_wraddr;
wire [21:0] main_bankmodel1_rdaddr;
reg  main_bankmodel2_activate = 1'd0;
reg  [12:0] main_bankmodel2_activate_row = 13'd0;
reg  main_bankmodel2_precharge = 1'd0;
wire main_bankmodel2_write;
wire [8:0] main_bankmodel2_write_col;
wire [31:0] main_bankmodel2_write_data;
wire [3:0] main_bankmodel2_write_mask;
reg  main_bankmodel2_read = 1'd0;
reg  [8:0] main_bankmodel2_read_col = 9'd0;
reg  [31:0] main_bankmodel2_read_data = 32'd0;
reg  main_bankmodel2_active = 1'd0;
reg  [12:0] main_bankmodel2_row = 13'd0;
reg  [21:0] main_bankmodel2_write_port_adr = 22'd0;
wire [31:0] main_bankmodel2_write_port_dat_r;
reg  [3:0] main_bankmodel2_write_port_we = 4'd0;
reg  [31:0] main_bankmodel2_write_port_dat_w = 32'd0;
reg  [21:0] main_bankmodel2_read_port_adr = 22'd0;
wire [31:0] main_bankmodel2_read_port_dat_r;
wire [21:0] main_bankmodel2_wraddr;
wire [21:0] main_bankmodel2_rdaddr;
reg  main_bankmodel3_activate = 1'd0;
reg  [12:0] main_bankmodel3_activate_row = 13'd0;
reg  main_bankmodel3_precharge = 1'd0;
wire main_bankmodel3_write;
wire [8:0] main_bankmodel3_write_col;
wire [31:0] main_bankmodel3_write_data;
wire [3:0] main_bankmodel3_write_mask;
reg  main_bankmodel3_read = 1'd0;
reg  [8:0] main_bankmodel3_read_col = 9'd0;
reg  [31:0] main_bankmodel3_read_data = 32'd0;
reg  main_bankmodel3_active = 1'd0;
reg  [12:0] main_bankmodel3_row = 13'd0;
reg  [21:0] main_bankmodel3_write_port_adr = 22'd0;
wire [31:0] main_bankmodel3_write_port_dat_r;
reg  [3:0] main_bankmodel3_write_port_we = 4'd0;
reg  [31:0] main_bankmodel3_write_port_dat_w = 32'd0;
reg  [21:0] main_bankmodel3_read_port_adr = 22'd0;
wire [31:0] main_bankmodel3_read_port_dat_r;
wire [21:0] main_bankmodel3_wraddr;
wire [21:0] main_bankmodel3_rdaddr;
wire main_activates0;
wire main_precharges0;
reg  main_bank_write0 = 1'd0;
reg  [8:0] main_bank_write_col0 = 9'd0;
wire main_writes0;
wire main_reads0;
wire main_activates1;
wire main_precharges1;
reg  main_bank_write1 = 1'd0;
reg  [8:0] main_bank_write_col1 = 9'd0;
wire main_writes1;
wire main_reads1;
wire main_activates2;
wire main_precharges2;
reg  main_bank_write2 = 1'd0;
reg  [8:0] main_bank_write_col2 = 9'd0;
wire main_writes2;
wire main_reads2;
wire main_activates3;
wire main_precharges3;
reg  main_bank_write3 = 1'd0;
reg  [8:0] main_bank_write_col3 = 9'd0;
wire main_writes3;
wire main_reads3;
wire main_banks_read;
wire [31:0] main_banks_read_data;
reg  main_new_banks_read0 = 1'd0;
reg  [31:0] main_new_banks_read_data0 = 32'd0;
reg  main_new_banks_read1 = 1'd0;
reg  [31:0] main_new_banks_read_data1 = 32'd0;
reg  main_new_banks_read2 = 1'd0;
reg  [31:0] main_new_banks_read_data2 = 32'd0;
reg  main_new_banks_read3 = 1'd0;
reg  [31:0] main_new_banks_read_data3 = 32'd0;
wire [12:0] main_sdram_slave_p0_address;
wire [1:0] main_sdram_slave_p0_bank;
wire main_sdram_slave_p0_cas_n;
wire main_sdram_slave_p0_cs_n;
wire main_sdram_slave_p0_ras_n;
wire main_sdram_slave_p0_we_n;
wire main_sdram_slave_p0_cke;
wire main_sdram_slave_p0_odt;
wire main_sdram_slave_p0_reset_n;
wire main_sdram_slave_p0_act_n;
wire [31:0] main_sdram_slave_p0_wrdata;
wire main_sdram_slave_p0_wrdata_en;
wire [3:0] main_sdram_slave_p0_wrdata_mask;
wire main_sdram_slave_p0_rddata_en;
reg  [31:0] main_sdram_slave_p0_rddata = 32'd0;
reg  main_sdram_slave_p0_rddata_valid = 1'd0;
reg  [12:0] main_sdram_master_p0_address = 13'd0;
reg  [1:0] main_sdram_master_p0_bank = 2'd0;
reg  main_sdram_master_p0_cas_n = 1'd1;
reg  main_sdram_master_p0_cs_n = 1'd1;
reg  main_sdram_master_p0_ras_n = 1'd1;
reg  main_sdram_master_p0_we_n = 1'd1;
reg  main_sdram_master_p0_cke = 1'd0;
reg  main_sdram_master_p0_odt = 1'd0;
reg  main_sdram_master_p0_reset_n = 1'd0;
reg  main_sdram_master_p0_act_n = 1'd1;
reg  [31:0] main_sdram_master_p0_wrdata = 32'd0;
reg  main_sdram_master_p0_wrdata_en = 1'd0;
reg  [3:0] main_sdram_master_p0_wrdata_mask = 4'd0;
reg  main_sdram_master_p0_rddata_en = 1'd0;
wire [31:0] main_sdram_master_p0_rddata;
wire main_sdram_master_p0_rddata_valid;
wire [12:0] main_sdram_csr_dfi_p0_address;
wire [1:0] main_sdram_csr_dfi_p0_bank;
reg  main_sdram_csr_dfi_p0_cas_n = 1'd1;
reg  main_sdram_csr_dfi_p0_cs_n = 1'd1;
reg  main_sdram_csr_dfi_p0_ras_n = 1'd1;
reg  main_sdram_csr_dfi_p0_we_n = 1'd1;
wire main_sdram_csr_dfi_p0_cke;
wire main_sdram_csr_dfi_p0_odt;
wire main_sdram_csr_dfi_p0_reset_n;
reg  main_sdram_csr_dfi_p0_act_n = 1'd1;
wire [31:0] main_sdram_csr_dfi_p0_wrdata;
wire main_sdram_csr_dfi_p0_wrdata_en;
wire [3:0] main_sdram_csr_dfi_p0_wrdata_mask;
wire main_sdram_csr_dfi_p0_rddata_en;
reg  [31:0] main_sdram_csr_dfi_p0_rddata = 32'd0;
reg  main_sdram_csr_dfi_p0_rddata_valid = 1'd0;
reg  [12:0] main_sdram_ext_dfi_p0_address = 13'd0;
reg  [1:0] main_sdram_ext_dfi_p0_bank = 2'd0;
reg  main_sdram_ext_dfi_p0_cas_n = 1'd1;
reg  main_sdram_ext_dfi_p0_cs_n = 1'd1;
reg  main_sdram_ext_dfi_p0_ras_n = 1'd1;
reg  main_sdram_ext_dfi_p0_we_n = 1'd1;
reg  main_sdram_ext_dfi_p0_cke = 1'd0;
reg  main_sdram_ext_dfi_p0_odt = 1'd0;
reg  main_sdram_ext_dfi_p0_reset_n = 1'd0;
reg  main_sdram_ext_dfi_p0_act_n = 1'd1;
reg  [31:0] main_sdram_ext_dfi_p0_wrdata = 32'd0;
reg  main_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg  [3:0] main_sdram_ext_dfi_p0_wrdata_mask = 4'd0;
reg  main_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg  [31:0] main_sdram_ext_dfi_p0_rddata = 32'd0;
reg  main_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg  main_sdram_ext_dfi_sel = 1'd0;
wire main_sdram_sel;
wire main_sdram_cke;
wire main_sdram_odt;
wire main_sdram_reset_n;
reg  [3:0] main_sdram_storage = 4'd1;
reg  main_sdram_re = 1'd0;
wire main_sdram_csrfield_cs;
wire main_sdram_csrfield_we;
wire main_sdram_csrfield_cas;
wire main_sdram_csrfield_ras;
wire main_sdram_csrfield_wren;
wire main_sdram_csrfield_rden;
reg  [5:0] main_sdram_command_storage = 6'd0;
reg  main_sdram_command_re = 1'd0;
reg  main_sdram_command_issue_re = 1'd0;
wire main_sdram_command_issue_r;
reg  main_sdram_command_issue_we = 1'd0;
reg  main_sdram_command_issue_w = 1'd0;
reg  [12:0] main_sdram_address_storage = 13'd0;
reg  main_sdram_address_re = 1'd0;
reg  [1:0] main_sdram_baddress_storage = 2'd0;
reg  main_sdram_baddress_re = 1'd0;
reg  [31:0] main_sdram_wrdata_storage = 32'd0;
reg  main_sdram_wrdata_re = 1'd0;
reg  [31:0] main_sdram_rddata_status = 32'd0;
wire main_sdram_rddata_we;
reg  main_sdram_rddata_re = 1'd0;
wire main_sdram_interface_bank0_valid;
wire main_sdram_interface_bank0_ready;
wire main_sdram_interface_bank0_we;
wire [21:0] main_sdram_interface_bank0_addr;
wire main_sdram_interface_bank0_lock;
wire main_sdram_interface_bank0_wdata_ready;
wire main_sdram_interface_bank0_rdata_valid;
wire main_sdram_interface_bank1_valid;
wire main_sdram_interface_bank1_ready;
wire main_sdram_interface_bank1_we;
wire [21:0] main_sdram_interface_bank1_addr;
wire main_sdram_interface_bank1_lock;
wire main_sdram_interface_bank1_wdata_ready;
wire main_sdram_interface_bank1_rdata_valid;
wire main_sdram_interface_bank2_valid;
wire main_sdram_interface_bank2_ready;
wire main_sdram_interface_bank2_we;
wire [21:0] main_sdram_interface_bank2_addr;
wire main_sdram_interface_bank2_lock;
wire main_sdram_interface_bank2_wdata_ready;
wire main_sdram_interface_bank2_rdata_valid;
wire main_sdram_interface_bank3_valid;
wire main_sdram_interface_bank3_ready;
wire main_sdram_interface_bank3_we;
wire [21:0] main_sdram_interface_bank3_addr;
wire main_sdram_interface_bank3_lock;
wire main_sdram_interface_bank3_wdata_ready;
wire main_sdram_interface_bank3_rdata_valid;
reg  [31:0] main_sdram_interface_wdata = 32'd0;
reg  [3:0] main_sdram_interface_wdata_we = 4'd0;
wire [31:0] main_sdram_interface_rdata;
reg  [12:0] main_sdram_dfi_p0_address = 13'd0;
reg  [1:0] main_sdram_dfi_p0_bank = 2'd0;
reg  main_sdram_dfi_p0_cas_n = 1'd1;
reg  main_sdram_dfi_p0_cs_n = 1'd1;
reg  main_sdram_dfi_p0_ras_n = 1'd1;
reg  main_sdram_dfi_p0_we_n = 1'd1;
wire main_sdram_dfi_p0_cke;
wire main_sdram_dfi_p0_odt;
wire main_sdram_dfi_p0_reset_n;
reg  main_sdram_dfi_p0_act_n = 1'd1;
wire [31:0] main_sdram_dfi_p0_wrdata;
reg  main_sdram_dfi_p0_wrdata_en = 1'd0;
wire [3:0] main_sdram_dfi_p0_wrdata_mask;
reg  main_sdram_dfi_p0_rddata_en = 1'd0;
wire [31:0] main_sdram_dfi_p0_rddata;
wire main_sdram_dfi_p0_rddata_valid;
reg  main_sdram_cmd_valid = 1'd0;
reg  main_sdram_cmd_ready = 1'd0;
reg  main_sdram_cmd_last = 1'd0;
reg  [12:0] main_sdram_cmd_payload_a = 13'd0;
reg  [1:0] main_sdram_cmd_payload_ba = 2'd0;
reg  main_sdram_cmd_payload_cas = 1'd0;
reg  main_sdram_cmd_payload_ras = 1'd0;
reg  main_sdram_cmd_payload_we = 1'd0;
reg  main_sdram_cmd_payload_is_read = 1'd0;
reg  main_sdram_cmd_payload_is_write = 1'd0;
wire main_sdram_wants_refresh;
wire main_sdram_timer_wait;
wire main_sdram_timer_done0;
wire [9:0] main_sdram_timer_count0;
wire main_sdram_timer_done1;
reg  [9:0] main_sdram_timer_count1 = 10'd781;
wire main_sdram_postponer_req_i;
reg  main_sdram_postponer_req_o = 1'd0;
reg  main_sdram_postponer_count = 1'd0;
reg  main_sdram_sequencer_start0 = 1'd0;
wire main_sdram_sequencer_done0;
wire main_sdram_sequencer_start1;
reg  main_sdram_sequencer_done1 = 1'd0;
reg  [3:0] main_sdram_sequencer_counter = 4'd0;
reg  main_sdram_sequencer_count = 1'd0;
wire main_sdram_bankmachine0_req_valid;
wire main_sdram_bankmachine0_req_ready;
wire main_sdram_bankmachine0_req_we;
wire [21:0] main_sdram_bankmachine0_req_addr;
wire main_sdram_bankmachine0_req_lock;
reg  main_sdram_bankmachine0_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine0_refresh_req;
reg  main_sdram_bankmachine0_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine0_cmd_valid = 1'd0;
reg  main_sdram_bankmachine0_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine0_cmd_payload_ba;
reg  main_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine0_auto_precharge = 1'd0;
wire main_sdram_bankmachine0_sink_valid;
wire main_sdram_bankmachine0_sink_ready;
reg  main_sdram_bankmachine0_sink_first = 1'd0;
reg  main_sdram_bankmachine0_sink_last = 1'd0;
wire main_sdram_bankmachine0_sink_payload_we;
wire [21:0] main_sdram_bankmachine0_sink_payload_addr;
wire main_sdram_bankmachine0_source_valid;
wire main_sdram_bankmachine0_source_ready;
wire main_sdram_bankmachine0_source_first;
wire main_sdram_bankmachine0_source_last;
wire main_sdram_bankmachine0_source_payload_we;
wire [21:0] main_sdram_bankmachine0_source_payload_addr;
wire main_sdram_bankmachine0_syncfifo0_we;
wire main_sdram_bankmachine0_syncfifo0_writable;
wire main_sdram_bankmachine0_syncfifo0_re;
wire main_sdram_bankmachine0_syncfifo0_readable;
wire [24:0] main_sdram_bankmachine0_syncfifo0_din;
wire [24:0] main_sdram_bankmachine0_syncfifo0_dout;
reg  [3:0] main_sdram_bankmachine0_level = 4'd0;
reg  main_sdram_bankmachine0_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine0_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine0_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine0_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine0_wrport_dat_r;
wire main_sdram_bankmachine0_wrport_we;
wire [24:0] main_sdram_bankmachine0_wrport_dat_w;
wire main_sdram_bankmachine0_do_read;
wire [2:0] main_sdram_bankmachine0_rdport_adr;
wire [24:0] main_sdram_bankmachine0_rdport_dat_r;
wire main_sdram_bankmachine0_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine0_fifo_in_payload_addr;
wire main_sdram_bankmachine0_fifo_in_first;
wire main_sdram_bankmachine0_fifo_in_last;
wire main_sdram_bankmachine0_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine0_fifo_out_payload_addr;
wire main_sdram_bankmachine0_fifo_out_first;
wire main_sdram_bankmachine0_fifo_out_last;
wire main_sdram_bankmachine0_sink_sink_valid;
wire main_sdram_bankmachine0_sink_sink_ready;
wire main_sdram_bankmachine0_sink_sink_first;
wire main_sdram_bankmachine0_sink_sink_last;
wire main_sdram_bankmachine0_sink_sink_payload_we;
wire [21:0] main_sdram_bankmachine0_sink_sink_payload_addr;
wire main_sdram_bankmachine0_source_source_valid;
wire main_sdram_bankmachine0_source_source_ready;
wire main_sdram_bankmachine0_source_source_first;
wire main_sdram_bankmachine0_source_source_last;
wire main_sdram_bankmachine0_source_source_payload_we;
wire [21:0] main_sdram_bankmachine0_source_source_payload_addr;
wire main_sdram_bankmachine0_pipe_valid_sink_valid;
wire main_sdram_bankmachine0_pipe_valid_sink_ready;
wire main_sdram_bankmachine0_pipe_valid_sink_first;
wire main_sdram_bankmachine0_pipe_valid_sink_last;
wire main_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire [21:0] main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
reg  main_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
wire main_sdram_bankmachine0_pipe_valid_source_ready;
reg  main_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg  main_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg  main_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine0_row = 13'd0;
reg  main_sdram_bankmachine0_row_opened = 1'd0;
wire main_sdram_bankmachine0_row_hit;
reg  main_sdram_bankmachine0_row_open = 1'd0;
reg  main_sdram_bankmachine0_row_close = 1'd0;
reg  main_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine0_twtpcon_valid;
reg  main_sdram_bankmachine0_twtpcon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine0_twtpcon_count = 3'd0;
wire main_sdram_bankmachine0_trccon_valid;
reg  main_sdram_bankmachine0_trccon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine0_trccon_count = 3'd0;
wire main_sdram_bankmachine0_trascon_valid;
reg  main_sdram_bankmachine0_trascon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine0_trascon_count = 3'd0;
wire main_sdram_bankmachine1_req_valid;
wire main_sdram_bankmachine1_req_ready;
wire main_sdram_bankmachine1_req_we;
wire [21:0] main_sdram_bankmachine1_req_addr;
wire main_sdram_bankmachine1_req_lock;
reg  main_sdram_bankmachine1_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine1_refresh_req;
reg  main_sdram_bankmachine1_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine1_cmd_valid = 1'd0;
reg  main_sdram_bankmachine1_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine1_cmd_payload_ba;
reg  main_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine1_auto_precharge = 1'd0;
wire main_sdram_bankmachine1_sink_valid;
wire main_sdram_bankmachine1_sink_ready;
reg  main_sdram_bankmachine1_sink_first = 1'd0;
reg  main_sdram_bankmachine1_sink_last = 1'd0;
wire main_sdram_bankmachine1_sink_payload_we;
wire [21:0] main_sdram_bankmachine1_sink_payload_addr;
wire main_sdram_bankmachine1_source_valid;
wire main_sdram_bankmachine1_source_ready;
wire main_sdram_bankmachine1_source_first;
wire main_sdram_bankmachine1_source_last;
wire main_sdram_bankmachine1_source_payload_we;
wire [21:0] main_sdram_bankmachine1_source_payload_addr;
wire main_sdram_bankmachine1_syncfifo1_we;
wire main_sdram_bankmachine1_syncfifo1_writable;
wire main_sdram_bankmachine1_syncfifo1_re;
wire main_sdram_bankmachine1_syncfifo1_readable;
wire [24:0] main_sdram_bankmachine1_syncfifo1_din;
wire [24:0] main_sdram_bankmachine1_syncfifo1_dout;
reg  [3:0] main_sdram_bankmachine1_level = 4'd0;
reg  main_sdram_bankmachine1_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine1_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine1_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine1_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine1_wrport_dat_r;
wire main_sdram_bankmachine1_wrport_we;
wire [24:0] main_sdram_bankmachine1_wrport_dat_w;
wire main_sdram_bankmachine1_do_read;
wire [2:0] main_sdram_bankmachine1_rdport_adr;
wire [24:0] main_sdram_bankmachine1_rdport_dat_r;
wire main_sdram_bankmachine1_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine1_fifo_in_payload_addr;
wire main_sdram_bankmachine1_fifo_in_first;
wire main_sdram_bankmachine1_fifo_in_last;
wire main_sdram_bankmachine1_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine1_fifo_out_payload_addr;
wire main_sdram_bankmachine1_fifo_out_first;
wire main_sdram_bankmachine1_fifo_out_last;
wire main_sdram_bankmachine1_sink_sink_valid;
wire main_sdram_bankmachine1_sink_sink_ready;
wire main_sdram_bankmachine1_sink_sink_first;
wire main_sdram_bankmachine1_sink_sink_last;
wire main_sdram_bankmachine1_sink_sink_payload_we;
wire [21:0] main_sdram_bankmachine1_sink_sink_payload_addr;
wire main_sdram_bankmachine1_source_source_valid;
wire main_sdram_bankmachine1_source_source_ready;
wire main_sdram_bankmachine1_source_source_first;
wire main_sdram_bankmachine1_source_source_last;
wire main_sdram_bankmachine1_source_source_payload_we;
wire [21:0] main_sdram_bankmachine1_source_source_payload_addr;
wire main_sdram_bankmachine1_pipe_valid_sink_valid;
wire main_sdram_bankmachine1_pipe_valid_sink_ready;
wire main_sdram_bankmachine1_pipe_valid_sink_first;
wire main_sdram_bankmachine1_pipe_valid_sink_last;
wire main_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire [21:0] main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
reg  main_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
wire main_sdram_bankmachine1_pipe_valid_source_ready;
reg  main_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg  main_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg  main_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine1_row = 13'd0;
reg  main_sdram_bankmachine1_row_opened = 1'd0;
wire main_sdram_bankmachine1_row_hit;
reg  main_sdram_bankmachine1_row_open = 1'd0;
reg  main_sdram_bankmachine1_row_close = 1'd0;
reg  main_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine1_twtpcon_valid;
reg  main_sdram_bankmachine1_twtpcon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine1_twtpcon_count = 3'd0;
wire main_sdram_bankmachine1_trccon_valid;
reg  main_sdram_bankmachine1_trccon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine1_trccon_count = 3'd0;
wire main_sdram_bankmachine1_trascon_valid;
reg  main_sdram_bankmachine1_trascon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine1_trascon_count = 3'd0;
wire main_sdram_bankmachine2_req_valid;
wire main_sdram_bankmachine2_req_ready;
wire main_sdram_bankmachine2_req_we;
wire [21:0] main_sdram_bankmachine2_req_addr;
wire main_sdram_bankmachine2_req_lock;
reg  main_sdram_bankmachine2_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine2_refresh_req;
reg  main_sdram_bankmachine2_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine2_cmd_valid = 1'd0;
reg  main_sdram_bankmachine2_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine2_cmd_payload_ba;
reg  main_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine2_auto_precharge = 1'd0;
wire main_sdram_bankmachine2_sink_valid;
wire main_sdram_bankmachine2_sink_ready;
reg  main_sdram_bankmachine2_sink_first = 1'd0;
reg  main_sdram_bankmachine2_sink_last = 1'd0;
wire main_sdram_bankmachine2_sink_payload_we;
wire [21:0] main_sdram_bankmachine2_sink_payload_addr;
wire main_sdram_bankmachine2_source_valid;
wire main_sdram_bankmachine2_source_ready;
wire main_sdram_bankmachine2_source_first;
wire main_sdram_bankmachine2_source_last;
wire main_sdram_bankmachine2_source_payload_we;
wire [21:0] main_sdram_bankmachine2_source_payload_addr;
wire main_sdram_bankmachine2_syncfifo2_we;
wire main_sdram_bankmachine2_syncfifo2_writable;
wire main_sdram_bankmachine2_syncfifo2_re;
wire main_sdram_bankmachine2_syncfifo2_readable;
wire [24:0] main_sdram_bankmachine2_syncfifo2_din;
wire [24:0] main_sdram_bankmachine2_syncfifo2_dout;
reg  [3:0] main_sdram_bankmachine2_level = 4'd0;
reg  main_sdram_bankmachine2_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine2_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine2_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine2_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine2_wrport_dat_r;
wire main_sdram_bankmachine2_wrport_we;
wire [24:0] main_sdram_bankmachine2_wrport_dat_w;
wire main_sdram_bankmachine2_do_read;
wire [2:0] main_sdram_bankmachine2_rdport_adr;
wire [24:0] main_sdram_bankmachine2_rdport_dat_r;
wire main_sdram_bankmachine2_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine2_fifo_in_payload_addr;
wire main_sdram_bankmachine2_fifo_in_first;
wire main_sdram_bankmachine2_fifo_in_last;
wire main_sdram_bankmachine2_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine2_fifo_out_payload_addr;
wire main_sdram_bankmachine2_fifo_out_first;
wire main_sdram_bankmachine2_fifo_out_last;
wire main_sdram_bankmachine2_sink_sink_valid;
wire main_sdram_bankmachine2_sink_sink_ready;
wire main_sdram_bankmachine2_sink_sink_first;
wire main_sdram_bankmachine2_sink_sink_last;
wire main_sdram_bankmachine2_sink_sink_payload_we;
wire [21:0] main_sdram_bankmachine2_sink_sink_payload_addr;
wire main_sdram_bankmachine2_source_source_valid;
wire main_sdram_bankmachine2_source_source_ready;
wire main_sdram_bankmachine2_source_source_first;
wire main_sdram_bankmachine2_source_source_last;
wire main_sdram_bankmachine2_source_source_payload_we;
wire [21:0] main_sdram_bankmachine2_source_source_payload_addr;
wire main_sdram_bankmachine2_pipe_valid_sink_valid;
wire main_sdram_bankmachine2_pipe_valid_sink_ready;
wire main_sdram_bankmachine2_pipe_valid_sink_first;
wire main_sdram_bankmachine2_pipe_valid_sink_last;
wire main_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire [21:0] main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
reg  main_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
wire main_sdram_bankmachine2_pipe_valid_source_ready;
reg  main_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg  main_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg  main_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine2_row = 13'd0;
reg  main_sdram_bankmachine2_row_opened = 1'd0;
wire main_sdram_bankmachine2_row_hit;
reg  main_sdram_bankmachine2_row_open = 1'd0;
reg  main_sdram_bankmachine2_row_close = 1'd0;
reg  main_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine2_twtpcon_valid;
reg  main_sdram_bankmachine2_twtpcon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine2_twtpcon_count = 3'd0;
wire main_sdram_bankmachine2_trccon_valid;
reg  main_sdram_bankmachine2_trccon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine2_trccon_count = 3'd0;
wire main_sdram_bankmachine2_trascon_valid;
reg  main_sdram_bankmachine2_trascon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine2_trascon_count = 3'd0;
wire main_sdram_bankmachine3_req_valid;
wire main_sdram_bankmachine3_req_ready;
wire main_sdram_bankmachine3_req_we;
wire [21:0] main_sdram_bankmachine3_req_addr;
wire main_sdram_bankmachine3_req_lock;
reg  main_sdram_bankmachine3_req_wdata_ready = 1'd0;
reg  main_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire main_sdram_bankmachine3_refresh_req;
reg  main_sdram_bankmachine3_refresh_gnt = 1'd0;
reg  main_sdram_bankmachine3_cmd_valid = 1'd0;
reg  main_sdram_bankmachine3_cmd_ready = 1'd0;
reg  [12:0] main_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire [1:0] main_sdram_bankmachine3_cmd_payload_ba;
reg  main_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg  main_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg  main_sdram_bankmachine3_auto_precharge = 1'd0;
wire main_sdram_bankmachine3_sink_valid;
wire main_sdram_bankmachine3_sink_ready;
reg  main_sdram_bankmachine3_sink_first = 1'd0;
reg  main_sdram_bankmachine3_sink_last = 1'd0;
wire main_sdram_bankmachine3_sink_payload_we;
wire [21:0] main_sdram_bankmachine3_sink_payload_addr;
wire main_sdram_bankmachine3_source_valid;
wire main_sdram_bankmachine3_source_ready;
wire main_sdram_bankmachine3_source_first;
wire main_sdram_bankmachine3_source_last;
wire main_sdram_bankmachine3_source_payload_we;
wire [21:0] main_sdram_bankmachine3_source_payload_addr;
wire main_sdram_bankmachine3_syncfifo3_we;
wire main_sdram_bankmachine3_syncfifo3_writable;
wire main_sdram_bankmachine3_syncfifo3_re;
wire main_sdram_bankmachine3_syncfifo3_readable;
wire [24:0] main_sdram_bankmachine3_syncfifo3_din;
wire [24:0] main_sdram_bankmachine3_syncfifo3_dout;
reg  [3:0] main_sdram_bankmachine3_level = 4'd0;
reg  main_sdram_bankmachine3_replace = 1'd0;
reg  [2:0] main_sdram_bankmachine3_produce = 3'd0;
reg  [2:0] main_sdram_bankmachine3_consume = 3'd0;
reg  [2:0] main_sdram_bankmachine3_wrport_adr = 3'd0;
wire [24:0] main_sdram_bankmachine3_wrport_dat_r;
wire main_sdram_bankmachine3_wrport_we;
wire [24:0] main_sdram_bankmachine3_wrport_dat_w;
wire main_sdram_bankmachine3_do_read;
wire [2:0] main_sdram_bankmachine3_rdport_adr;
wire [24:0] main_sdram_bankmachine3_rdport_dat_r;
wire main_sdram_bankmachine3_fifo_in_payload_we;
wire [21:0] main_sdram_bankmachine3_fifo_in_payload_addr;
wire main_sdram_bankmachine3_fifo_in_first;
wire main_sdram_bankmachine3_fifo_in_last;
wire main_sdram_bankmachine3_fifo_out_payload_we;
wire [21:0] main_sdram_bankmachine3_fifo_out_payload_addr;
wire main_sdram_bankmachine3_fifo_out_first;
wire main_sdram_bankmachine3_fifo_out_last;
wire main_sdram_bankmachine3_sink_sink_valid;
wire main_sdram_bankmachine3_sink_sink_ready;
wire main_sdram_bankmachine3_sink_sink_first;
wire main_sdram_bankmachine3_sink_sink_last;
wire main_sdram_bankmachine3_sink_sink_payload_we;
wire [21:0] main_sdram_bankmachine3_sink_sink_payload_addr;
wire main_sdram_bankmachine3_source_source_valid;
wire main_sdram_bankmachine3_source_source_ready;
wire main_sdram_bankmachine3_source_source_first;
wire main_sdram_bankmachine3_source_source_last;
wire main_sdram_bankmachine3_source_source_payload_we;
wire [21:0] main_sdram_bankmachine3_source_source_payload_addr;
wire main_sdram_bankmachine3_pipe_valid_sink_valid;
wire main_sdram_bankmachine3_pipe_valid_sink_ready;
wire main_sdram_bankmachine3_pipe_valid_sink_first;
wire main_sdram_bankmachine3_pipe_valid_sink_last;
wire main_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire [21:0] main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
reg  main_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
wire main_sdram_bankmachine3_pipe_valid_source_ready;
reg  main_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg  main_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg  main_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
reg  [21:0] main_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg  [12:0] main_sdram_bankmachine3_row = 13'd0;
reg  main_sdram_bankmachine3_row_opened = 1'd0;
wire main_sdram_bankmachine3_row_hit;
reg  main_sdram_bankmachine3_row_open = 1'd0;
reg  main_sdram_bankmachine3_row_close = 1'd0;
reg  main_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire main_sdram_bankmachine3_twtpcon_valid;
reg  main_sdram_bankmachine3_twtpcon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine3_twtpcon_count = 3'd0;
wire main_sdram_bankmachine3_trccon_valid;
reg  main_sdram_bankmachine3_trccon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine3_trccon_count = 3'd0;
wire main_sdram_bankmachine3_trascon_valid;
reg  main_sdram_bankmachine3_trascon_ready = 1'd0;
reg  [2:0] main_sdram_bankmachine3_trascon_count = 3'd0;
wire main_sdram_ras_allowed;
wire main_sdram_cas_allowed;
reg  main_sdram_choose_cmd_want_reads = 1'd0;
reg  main_sdram_choose_cmd_want_writes = 1'd0;
reg  main_sdram_choose_cmd_want_cmds = 1'd0;
reg  main_sdram_choose_cmd_want_activates = 1'd0;
wire main_sdram_choose_cmd_cmd_valid;
reg  main_sdram_choose_cmd_cmd_ready = 1'd0;
wire [12:0] main_sdram_choose_cmd_cmd_payload_a;
wire [1:0] main_sdram_choose_cmd_cmd_payload_ba;
reg  main_sdram_choose_cmd_cmd_payload_cas = 1'd0;
reg  main_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg  main_sdram_choose_cmd_cmd_payload_we = 1'd0;
wire main_sdram_choose_cmd_cmd_payload_is_cmd;
wire main_sdram_choose_cmd_cmd_payload_is_read;
wire main_sdram_choose_cmd_cmd_payload_is_write;
reg  [3:0] main_sdram_choose_cmd_valids = 4'd0;
wire [3:0] main_sdram_choose_cmd_request;
reg  [1:0] main_sdram_choose_cmd_grant = 2'd0;
wire main_sdram_choose_cmd_ce;
reg  main_sdram_choose_req_want_reads = 1'd0;
reg  main_sdram_choose_req_want_writes = 1'd0;
wire main_sdram_choose_req_want_cmds;
reg  main_sdram_choose_req_want_activates = 1'd0;
wire main_sdram_choose_req_cmd_valid;
reg  main_sdram_choose_req_cmd_ready = 1'd0;
wire [12:0] main_sdram_choose_req_cmd_payload_a;
wire [1:0] main_sdram_choose_req_cmd_payload_ba;
reg  main_sdram_choose_req_cmd_payload_cas = 1'd0;
reg  main_sdram_choose_req_cmd_payload_ras = 1'd0;
reg  main_sdram_choose_req_cmd_payload_we = 1'd0;
wire main_sdram_choose_req_cmd_payload_is_cmd;
wire main_sdram_choose_req_cmd_payload_is_read;
wire main_sdram_choose_req_cmd_payload_is_write;
reg  [3:0] main_sdram_choose_req_valids = 4'd0;
wire [3:0] main_sdram_choose_req_request;
reg  [1:0] main_sdram_choose_req_grant = 2'd0;
wire main_sdram_choose_req_ce;
reg  [12:0] main_sdram_nop_a = 13'd0;
reg  [1:0] main_sdram_nop_ba = 2'd0;
reg  [1:0] main_sdram_steerer_sel = 2'd0;
reg  main_sdram_steerer0 = 1'd1;
reg  main_sdram_steerer1 = 1'd1;
wire main_sdram_trrdcon_valid;
reg  main_sdram_trrdcon_ready = 1'd0;
reg  main_sdram_trrdcon_count = 1'd0;
wire main_sdram_tfawcon_valid;
reg  main_sdram_tfawcon_ready = 1'd1;
wire main_sdram_tccdcon_valid;
reg  main_sdram_tccdcon_ready = 1'd0;
reg  main_sdram_tccdcon_count = 1'd0;
wire main_sdram_twtrcon_valid;
reg  main_sdram_twtrcon_ready = 1'd0;
reg  [2:0] main_sdram_twtrcon_count = 3'd0;
wire main_sdram_read_available;
wire main_sdram_write_available;
reg  main_sdram_en0 = 1'd0;
wire main_sdram_max_time0;
reg  [4:0] main_sdram_time0 = 5'd0;
reg  main_sdram_en1 = 1'd0;
wire main_sdram_max_time1;
reg  [3:0] main_sdram_time1 = 4'd0;
wire main_sdram_go_to_refresh;
reg  main_port_cmd_valid = 1'd0;
wire main_port_cmd_ready;
reg  main_port_cmd_payload_we = 1'd0;
reg  [23:0] main_port_cmd_payload_addr = 24'd0;
wire main_port_wdata_valid;
wire main_port_wdata_ready;
wire main_port_wdata_first;
wire main_port_wdata_last;
wire [31:0] main_port_wdata_payload_data;
wire [3:0] main_port_wdata_payload_we;
wire main_port_rdata_valid;
wire main_port_rdata_ready;
reg  main_port_rdata_first = 1'd0;
reg  main_port_rdata_last = 1'd0;
wire [31:0] main_port_rdata_payload_data;
wire [29:0] main_wb_sdram_adr;
wire [31:0] main_wb_sdram_dat_w;
reg  [31:0] main_wb_sdram_dat_r = 32'd0;
wire [3:0] main_wb_sdram_sel;
wire main_wb_sdram_cyc;
wire main_wb_sdram_stb;
reg  main_wb_sdram_ack = 1'd0;
wire main_wb_sdram_we;
wire [2:0] main_wb_sdram_cti;
wire [1:0] main_wb_sdram_bte;
reg  main_wb_sdram_err = 1'd0;
wire [29:0] main_interface_adr;
wire [127:0] main_interface_dat_w;
reg  [127:0] main_interface_dat_r = 128'd0;
wire [15:0] main_interface_sel;
reg  main_interface_cyc = 1'd0;
reg  main_interface_stb = 1'd0;
reg  main_interface_ack = 1'd0;
reg  main_interface_we = 1'd0;
wire [8:0] main_data_port_adr;
wire [127:0] main_data_port_dat_r;
reg  [15:0] main_data_port_we = 16'd0;
reg  [127:0] main_data_port_dat_w = 128'd0;
reg  main_write_from_slave = 1'd0;
reg  [1:0] main_adr_offset_r = 2'd0;
wire [8:0] main_tag_port_adr;
wire [23:0] main_tag_port_dat_r;
reg  main_tag_port_we = 1'd0;
wire [23:0] main_tag_port_dat_w;
wire [22:0] main_tag_do_tag;
wire main_tag_do_dirty;
wire [22:0] main_tag_di_tag;
reg  main_tag_di_dirty = 1'd0;
reg  main_word_clr = 1'd0;
reg  main_word_inc = 1'd0;
wire main_wishbone_bridge_flush;
reg  main_wishbone_bridge_cmd_valid = 1'd0;
reg  main_wishbone_bridge_cmd_ready = 1'd0;
wire main_wishbone_bridge_cmd_last;
wire main_wishbone_bridge_cmd_payload_we;
wire [21:0] main_wishbone_bridge_cmd_payload_addr;
reg  main_wishbone_bridge_wdata_valid = 1'd0;
wire main_wishbone_bridge_wdata_ready;
reg  main_wishbone_bridge_wdata_first = 1'd0;
reg  main_wishbone_bridge_wdata_last = 1'd0;
wire [127:0] main_wishbone_bridge_wdata_payload_data;
wire [15:0] main_wishbone_bridge_wdata_payload_we;
wire main_wishbone_bridge_rdata_valid;
wire main_wishbone_bridge_rdata_ready;
wire main_wishbone_bridge_rdata_first;
wire main_wishbone_bridge_rdata_last;
wire [127:0] main_wishbone_bridge_rdata_payload_data;
reg  [1:0] main_wishbone_bridge_count = 2'd0;
wire main_wishbone_bridge_wdata_converter_sink_valid;
wire main_wishbone_bridge_wdata_converter_sink_ready;
wire main_wishbone_bridge_wdata_converter_sink_first;
wire main_wishbone_bridge_wdata_converter_sink_last;
wire [127:0] main_wishbone_bridge_wdata_converter_sink_payload_data;
wire [15:0] main_wishbone_bridge_wdata_converter_sink_payload_we;
wire main_wishbone_bridge_wdata_converter_source_valid;
wire main_wishbone_bridge_wdata_converter_source_ready;
wire main_wishbone_bridge_wdata_converter_source_first;
wire main_wishbone_bridge_wdata_converter_source_last;
wire [31:0] main_wishbone_bridge_wdata_converter_source_payload_data;
wire [3:0] main_wishbone_bridge_wdata_converter_source_payload_we;
wire main_wishbone_bridge_wdata_converter_converter_sink_valid;
wire main_wishbone_bridge_wdata_converter_converter_sink_ready;
wire main_wishbone_bridge_wdata_converter_converter_sink_first;
wire main_wishbone_bridge_wdata_converter_converter_sink_last;
reg  [143:0] main_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire main_wishbone_bridge_wdata_converter_converter_source_valid;
wire main_wishbone_bridge_wdata_converter_converter_source_ready;
wire main_wishbone_bridge_wdata_converter_converter_source_first;
wire main_wishbone_bridge_wdata_converter_converter_source_last;
reg  [35:0] main_wishbone_bridge_wdata_converter_converter_source_payload_data = 36'd0;
wire main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
reg  [1:0] main_wishbone_bridge_wdata_converter_converter_mux = 2'd0;
wire main_wishbone_bridge_wdata_converter_converter_first;
wire main_wishbone_bridge_wdata_converter_converter_last;
wire main_wishbone_bridge_wdata_converter_source_source_valid;
wire main_wishbone_bridge_wdata_converter_source_source_ready;
wire main_wishbone_bridge_wdata_converter_source_source_first;
wire main_wishbone_bridge_wdata_converter_source_source_last;
wire [35:0] main_wishbone_bridge_wdata_converter_source_source_payload_data;
wire main_wishbone_bridge_rdata_converter_sink_valid;
wire main_wishbone_bridge_rdata_converter_sink_ready;
wire main_wishbone_bridge_rdata_converter_sink_first;
wire main_wishbone_bridge_rdata_converter_sink_last;
wire [31:0] main_wishbone_bridge_rdata_converter_sink_payload_data;
wire main_wishbone_bridge_rdata_converter_source_valid;
wire main_wishbone_bridge_rdata_converter_source_ready;
wire main_wishbone_bridge_rdata_converter_source_first;
wire main_wishbone_bridge_rdata_converter_source_last;
reg  [127:0] main_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire main_wishbone_bridge_rdata_converter_converter_sink_valid;
wire main_wishbone_bridge_rdata_converter_converter_sink_ready;
wire main_wishbone_bridge_rdata_converter_converter_sink_first;
wire main_wishbone_bridge_rdata_converter_converter_sink_last;
wire [31:0] main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire main_wishbone_bridge_rdata_converter_converter_source_valid;
wire main_wishbone_bridge_rdata_converter_converter_source_ready;
reg  main_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg  main_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg  [127:0] main_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg  [2:0] main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 3'd0;
reg  [1:0] main_wishbone_bridge_rdata_converter_converter_demux = 2'd0;
wire main_wishbone_bridge_rdata_converter_converter_load_part;
reg  main_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire main_wishbone_bridge_rdata_converter_source_source_valid;
wire main_wishbone_bridge_rdata_converter_source_source_ready;
wire main_wishbone_bridge_rdata_converter_source_source_first;
wire main_wishbone_bridge_rdata_converter_source_source_last;
wire [127:0] main_wishbone_bridge_rdata_converter_source_source_payload_data;
reg  main_wishbone_bridge_aborted = 1'd0;
reg  main_wishbone_bridge_is_ongoing = 1'd0;
reg  [13:0] builder_simsoc_adr = 14'd0;
reg  builder_simsoc_we = 1'd0;
reg  [31:0] builder_simsoc_dat_w = 32'd0;
wire [31:0] builder_simsoc_dat_r;
wire [29:0] builder_simsoc_wishbone_adr;
wire [31:0] builder_simsoc_wishbone_dat_w;
reg  [31:0] builder_simsoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_simsoc_wishbone_sel;
wire builder_simsoc_wishbone_cyc;
wire builder_simsoc_wishbone_stb;
reg  builder_simsoc_wishbone_ack = 1'd0;
wire builder_simsoc_wishbone_we;
wire [2:0] builder_simsoc_wishbone_cti;
wire [1:0] builder_simsoc_wishbone_bte;
reg  builder_simsoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg  [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg  builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg  builder_grant = 1'd0;
reg  [3:0] builder_slave_sel = 4'd0;
reg  [3:0] builder_slave_sel_r = 4'd0;
reg  builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg  [19:0] builder_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg  builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg  builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg  builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg  builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg  builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg  [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg  builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank1_dfii_control0_re = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank1_dfii_control0_r;
reg  builder_csr_bankarray_csrbank1_dfii_control0_we = 1'd0;
wire [3:0] builder_csr_bankarray_csrbank1_dfii_control0_w;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_command0_re = 1'd0;
wire [5:0] builder_csr_bankarray_csrbank1_dfii_pi0_command0_r;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_command0_we = 1'd0;
wire [5:0] builder_csr_bankarray_csrbank1_dfii_pi0_command0_w;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_address0_re = 1'd0;
wire [12:0] builder_csr_bankarray_csrbank1_dfii_pi0_address0_r;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_address0_we = 1'd0;
wire [12:0] builder_csr_bankarray_csrbank1_dfii_pi0_address0_w;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_r;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_w;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_r;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_w;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_rddata_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_dfii_pi0_rddata_r;
reg  builder_csr_bankarray_csrbank1_dfii_pi0_rddata_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_dfii_pi0_rddata_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank2_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_r;
reg  builder_csr_bankarray_csrbank2_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_w;
reg  builder_csr_bankarray_csrbank2_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_r;
reg  builder_csr_bankarray_csrbank2_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_w;
reg  builder_csr_bankarray_csrbank2_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_r;
reg  builder_csr_bankarray_csrbank2_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_w;
reg  builder_csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_r;
reg  builder_csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_w;
reg  builder_csr_bankarray_csrbank2_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_r;
reg  builder_csr_bankarray_csrbank2_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_w;
reg  builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_r;
reg  builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_w;
reg  builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_r;
reg  builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_w;
reg  builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_r;
reg  builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
wire builder_csr_bankarray_interface3_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank3_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_r;
reg  builder_csr_bankarray_csrbank3_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_w;
reg  builder_csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_r;
reg  builder_csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_w;
reg  builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_r;
reg  builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_w;
reg  builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_r;
reg  builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_w;
reg  builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_r;
reg  builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_w;
reg  builder_csr_bankarray_csrbank3_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_r;
reg  builder_csr_bankarray_csrbank3_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_w;
reg  builder_csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_r;
reg  builder_csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_w;
wire builder_csr_bankarray_csrbank3_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg  [1:0] builder_simsoc_refresher_state = 2'd0;
reg  [1:0] builder_simsoc_refresher_next_state = 2'd0;
reg  [2:0] builder_simsoc_bankmachine0_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine0_next_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine1_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine1_next_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine2_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine2_next_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine3_state = 3'd0;
reg  [2:0] builder_simsoc_bankmachine3_next_state = 3'd0;
reg  [2:0] builder_simsoc_multiplexer_state = 3'd0;
reg  [2:0] builder_simsoc_multiplexer_next_state = 3'd0;
wire builder_simsoc_roundrobin0_request;
wire builder_simsoc_roundrobin0_grant;
wire builder_simsoc_roundrobin0_ce;
wire builder_simsoc_roundrobin1_request;
wire builder_simsoc_roundrobin1_grant;
wire builder_simsoc_roundrobin1_ce;
wire builder_simsoc_roundrobin2_request;
wire builder_simsoc_roundrobin2_grant;
wire builder_simsoc_roundrobin2_ce;
wire builder_simsoc_roundrobin3_request;
wire builder_simsoc_roundrobin3_grant;
wire builder_simsoc_roundrobin3_ce;
reg  builder_simsoc_locked0 = 1'd0;
reg  builder_simsoc_locked1 = 1'd0;
reg  builder_simsoc_locked2 = 1'd0;
reg  builder_simsoc_locked3 = 1'd0;
reg  builder_simsoc_new_master_wdata_ready = 1'd0;
reg  builder_simsoc_new_master_rdata_valid0 = 1'd0;
reg  builder_simsoc_new_master_rdata_valid1 = 1'd0;
reg  builder_simsoc_new_master_rdata_valid2 = 1'd0;
reg  builder_simsoc_new_master_rdata_valid3 = 1'd0;
reg  builder_simsoc_new_master_rdata_valid4 = 1'd0;
reg  [1:0] builder_simsoc_fullmemorywe_state = 2'd0;
reg  [1:0] builder_simsoc_fullmemorywe_next_state = 2'd0;
reg  builder_simsoc_litedramnativeportconverter_state = 1'd0;
reg  builder_simsoc_litedramnativeportconverter_next_state = 1'd0;
reg  [1:0] main_wishbone_bridge_count_litedramnativeportconverter_next_value = 2'd0;
reg  main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce = 1'd0;
reg  [1:0] builder_simsoc_fsm_state = 2'd0;
reg  [1:0] builder_simsoc_fsm_next_state = 2'd0;
reg  main_wishbone_bridge_aborted_fsm_next_value = 1'd0;
reg  main_wishbone_bridge_aborted_fsm_next_value_ce = 1'd0;
reg  [1:0] builder_simsoc_wishbone2csr_state = 2'd0;
reg  [1:0] builder_simsoc_wishbone2csr_next_state = 2'd0;
reg  [31:0] builder_simsoc_dat_w_next_value0 = 32'd0;
reg  builder_simsoc_dat_w_next_value_ce0 = 1'd0;
reg  [13:0] builder_simsoc_adr_next_value1 = 14'd0;
reg  builder_simsoc_adr_next_value_ce1 = 1'd0;
reg  builder_simsoc_we_next_value2 = 1'd0;
reg  builder_simsoc_we_next_value_ce2 = 1'd0;
wire [22:0] builder_slice_proxy0;
wire [22:0] builder_slice_proxy1;
wire [22:0] builder_slice_proxy2;
wire [22:0] builder_slice_proxy3;
wire [22:0] builder_slice_proxy4;
wire [22:0] builder_slice_proxy5;
wire [22:0] builder_slice_proxy6;
wire [22:0] builder_slice_proxy7;
reg  builder_rhs_array_muxed0 = 1'd0;
reg  [12:0] builder_rhs_array_muxed1 = 13'd0;
reg  [1:0] builder_rhs_array_muxed2 = 2'd0;
reg  builder_rhs_array_muxed3 = 1'd0;
reg  builder_rhs_array_muxed4 = 1'd0;
reg  builder_rhs_array_muxed5 = 1'd0;
reg  builder_t_array_muxed0 = 1'd0;
reg  builder_t_array_muxed1 = 1'd0;
reg  builder_t_array_muxed2 = 1'd0;
reg  builder_rhs_array_muxed6 = 1'd0;
reg  [12:0] builder_rhs_array_muxed7 = 13'd0;
reg  [1:0] builder_rhs_array_muxed8 = 2'd0;
reg  builder_rhs_array_muxed9 = 1'd0;
reg  builder_rhs_array_muxed10 = 1'd0;
reg  builder_rhs_array_muxed11 = 1'd0;
reg  builder_t_array_muxed3 = 1'd0;
reg  builder_t_array_muxed4 = 1'd0;
reg  builder_t_array_muxed5 = 1'd0;
reg  [21:0] builder_rhs_array_muxed12 = 22'd0;
reg  builder_rhs_array_muxed13 = 1'd0;
reg  builder_rhs_array_muxed14 = 1'd0;
reg  [21:0] builder_rhs_array_muxed15 = 22'd0;
reg  builder_rhs_array_muxed16 = 1'd0;
reg  builder_rhs_array_muxed17 = 1'd0;
reg  [21:0] builder_rhs_array_muxed18 = 22'd0;
reg  builder_rhs_array_muxed19 = 1'd0;
reg  builder_rhs_array_muxed20 = 1'd0;
reg  [21:0] builder_rhs_array_muxed21 = 22'd0;
reg  builder_rhs_array_muxed22 = 1'd0;
reg  builder_rhs_array_muxed23 = 1'd0;
reg  [29:0] builder_rhs_array_muxed24 = 30'd0;
reg  [31:0] builder_rhs_array_muxed25 = 32'd0;
reg  [3:0] builder_rhs_array_muxed26 = 4'd0;
reg  builder_rhs_array_muxed27 = 1'd0;
reg  builder_rhs_array_muxed28 = 1'd0;
reg  builder_rhs_array_muxed29 = 1'd0;
reg  [2:0] builder_rhs_array_muxed30 = 3'd0;
reg  [1:0] builder_rhs_array_muxed31 = 2'd0;
reg  [1:0] builder_array_muxed0 = 2'd0;
reg  [12:0] builder_array_muxed1 = 13'd0;
reg  builder_array_muxed2 = 1'd0;
reg  builder_array_muxed3 = 1'd0;
reg  builder_array_muxed4 = 1'd0;
reg  builder_array_muxed5 = 1'd0;
reg  builder_array_muxed6 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_reset = (main_soc_rst | main_cpu_rst);
assign sim_trace = 1'd1;
assign main_bus_error = builder_error;
always @(*) begin
	main_interrupt <= 32'd0;
	main_interrupt[1] <= main_timer_irq;
	main_interrupt[0] <= main_uart_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = main_int_rst;
assign main_bus_errors_status = main_bus_errors;
assign main_simsoc_adr = main_simsoc_ram_bus_adr[14:0];
assign main_simsoc_ram_bus_dat_r = main_simsoc_dat_r;
always @(*) begin
	main_ram_we <= 4'd0;
	main_ram_we[0] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[0]);
	main_ram_we[1] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[1]);
	main_ram_we[2] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[2]);
	main_ram_we[3] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[3]);
end
assign main_ram_adr = main_ram_bus_ram_bus_adr[10:0];
assign main_ram_bus_ram_bus_dat_r = main_ram_dat_r;
assign main_ram_dat_w = main_ram_bus_ram_bus_dat_w;
assign serial_source_valid = main_sink_valid;
assign serial_source_data = main_sink_payload_data;
assign main_sink_ready = serial_source_ready;
assign main_source_valid = serial_sink_valid;
assign main_source_payload_data = serial_sink_data;
assign serial_sink_ready = main_source_ready;
assign main_uart_uart_sink_valid = main_source_valid;
assign main_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_source_first;
assign main_uart_uart_sink_last = main_source_last;
assign main_uart_uart_sink_payload_data = main_source_payload_data;
assign main_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_sink_ready;
assign main_sink_first = main_uart_uart_source_first;
assign main_sink_last = main_uart_uart_source_last;
assign main_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
	main_uart_tx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[0])) begin
		main_uart_tx_clear <= 1'd1;
	end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
	main_uart_rx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[1])) begin
		main_uart_rx_clear <= 1'd1;
	end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
	main_uart_tx_fifo_wrport_adr <= 4'd0;
	if (main_uart_tx_fifo_replace) begin
		main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
	end else begin
		main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
	end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
	main_uart_rx_fifo_wrport_adr <= 4'd0;
	if (main_uart_rx_fifo_replace) begin
		main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
	end else begin
		main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
	end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_timer_zero_trigger = (main_timer_value == 1'd0);
assign main_timer_zero0 = main_timer_zero_status;
assign main_timer_zero1 = main_timer_zero_pending;
always @(*) begin
	main_timer_zero_clear <= 1'd0;
	if ((main_timer_pending_re & main_timer_pending_r)) begin
		main_timer_zero_clear <= 1'd1;
	end
end
assign main_timer_irq = (main_timer_pending_status & main_timer_enable_storage);
assign main_timer_zero_status = main_timer_zero_trigger;
assign main_activates0 = main_activate;
always @(*) begin
	main_bankmodel0_activate <= 1'd0;
	case (main_activates0)
		1'd1: begin
			main_bankmodel0_activate <= (main_dfi_p0_bank == 1'd0);
		end
	endcase
end
always @(*) begin
	main_bankmodel0_activate_row <= 13'd0;
	case (main_activates0)
		1'd1: begin
			main_bankmodel0_activate_row <= main_dfi_p0_address;
		end
	endcase
end
assign main_precharges0 = main_precharge;
always @(*) begin
	main_bankmodel0_precharge <= 1'd0;
	case (main_precharges0)
		1'd1: begin
			main_bankmodel0_precharge <= ((main_dfi_p0_bank == 1'd0) | main_dfi_p0_address[10]);
		end
	endcase
end
assign main_writes0 = main_write;
always @(*) begin
	main_bank_write_col0 <= 9'd0;
	case (main_writes0)
		1'd1: begin
			main_bank_write_col0 <= main_dfi_p0_address;
		end
	endcase
end
always @(*) begin
	main_bank_write0 <= 1'd0;
	case (main_writes0)
		1'd1: begin
			main_bank_write0 <= (main_dfi_p0_bank == 1'd0);
		end
	endcase
end
assign main_bankmodel0_write_data = {main_dfi_p0_wrdata};
assign main_bankmodel0_write_mask = {main_dfi_p0_wrdata_mask};
assign main_bankmodel0_write = main_bank_write0;
assign main_bankmodel0_write_col = main_bank_write_col0;
assign main_reads0 = main_read;
always @(*) begin
	main_bankmodel0_read <= 1'd0;
	case (main_reads0)
		1'd1: begin
			main_bankmodel0_read <= (main_dfi_p0_bank == 1'd0);
		end
	endcase
end
always @(*) begin
	main_bankmodel0_read_col <= 9'd0;
	case (main_reads0)
		1'd1: begin
			main_bankmodel0_read_col <= main_dfi_p0_address;
		end
	endcase
end
assign main_activates1 = main_activate;
always @(*) begin
	main_bankmodel1_activate_row <= 13'd0;
	case (main_activates1)
		1'd1: begin
			main_bankmodel1_activate_row <= main_dfi_p0_address;
		end
	endcase
end
always @(*) begin
	main_bankmodel1_activate <= 1'd0;
	case (main_activates1)
		1'd1: begin
			main_bankmodel1_activate <= (main_dfi_p0_bank == 1'd1);
		end
	endcase
end
assign main_precharges1 = main_precharge;
always @(*) begin
	main_bankmodel1_precharge <= 1'd0;
	case (main_precharges1)
		1'd1: begin
			main_bankmodel1_precharge <= ((main_dfi_p0_bank == 1'd1) | main_dfi_p0_address[10]);
		end
	endcase
end
assign main_writes1 = main_write;
always @(*) begin
	main_bank_write_col1 <= 9'd0;
	case (main_writes1)
		1'd1: begin
			main_bank_write_col1 <= main_dfi_p0_address;
		end
	endcase
end
always @(*) begin
	main_bank_write1 <= 1'd0;
	case (main_writes1)
		1'd1: begin
			main_bank_write1 <= (main_dfi_p0_bank == 1'd1);
		end
	endcase
end
assign main_bankmodel1_write_data = {main_dfi_p0_wrdata};
assign main_bankmodel1_write_mask = {main_dfi_p0_wrdata_mask};
assign main_bankmodel1_write = main_bank_write1;
assign main_bankmodel1_write_col = main_bank_write_col1;
assign main_reads1 = main_read;
always @(*) begin
	main_bankmodel1_read <= 1'd0;
	case (main_reads1)
		1'd1: begin
			main_bankmodel1_read <= (main_dfi_p0_bank == 1'd1);
		end
	endcase
end
always @(*) begin
	main_bankmodel1_read_col <= 9'd0;
	case (main_reads1)
		1'd1: begin
			main_bankmodel1_read_col <= main_dfi_p0_address;
		end
	endcase
end
assign main_activates2 = main_activate;
always @(*) begin
	main_bankmodel2_activate <= 1'd0;
	case (main_activates2)
		1'd1: begin
			main_bankmodel2_activate <= (main_dfi_p0_bank == 2'd2);
		end
	endcase
end
always @(*) begin
	main_bankmodel2_activate_row <= 13'd0;
	case (main_activates2)
		1'd1: begin
			main_bankmodel2_activate_row <= main_dfi_p0_address;
		end
	endcase
end
assign main_precharges2 = main_precharge;
always @(*) begin
	main_bankmodel2_precharge <= 1'd0;
	case (main_precharges2)
		1'd1: begin
			main_bankmodel2_precharge <= ((main_dfi_p0_bank == 2'd2) | main_dfi_p0_address[10]);
		end
	endcase
end
assign main_writes2 = main_write;
always @(*) begin
	main_bank_write_col2 <= 9'd0;
	case (main_writes2)
		1'd1: begin
			main_bank_write_col2 <= main_dfi_p0_address;
		end
	endcase
end
always @(*) begin
	main_bank_write2 <= 1'd0;
	case (main_writes2)
		1'd1: begin
			main_bank_write2 <= (main_dfi_p0_bank == 2'd2);
		end
	endcase
end
assign main_bankmodel2_write_data = {main_dfi_p0_wrdata};
assign main_bankmodel2_write_mask = {main_dfi_p0_wrdata_mask};
assign main_bankmodel2_write = main_bank_write2;
assign main_bankmodel2_write_col = main_bank_write_col2;
assign main_reads2 = main_read;
always @(*) begin
	main_bankmodel2_read <= 1'd0;
	case (main_reads2)
		1'd1: begin
			main_bankmodel2_read <= (main_dfi_p0_bank == 2'd2);
		end
	endcase
end
always @(*) begin
	main_bankmodel2_read_col <= 9'd0;
	case (main_reads2)
		1'd1: begin
			main_bankmodel2_read_col <= main_dfi_p0_address;
		end
	endcase
end
assign main_activates3 = main_activate;
always @(*) begin
	main_bankmodel3_activate <= 1'd0;
	case (main_activates3)
		1'd1: begin
			main_bankmodel3_activate <= (main_dfi_p0_bank == 2'd3);
		end
	endcase
end
always @(*) begin
	main_bankmodel3_activate_row <= 13'd0;
	case (main_activates3)
		1'd1: begin
			main_bankmodel3_activate_row <= main_dfi_p0_address;
		end
	endcase
end
assign main_precharges3 = main_precharge;
always @(*) begin
	main_bankmodel3_precharge <= 1'd0;
	case (main_precharges3)
		1'd1: begin
			main_bankmodel3_precharge <= ((main_dfi_p0_bank == 2'd3) | main_dfi_p0_address[10]);
		end
	endcase
end
assign main_writes3 = main_write;
always @(*) begin
	main_bank_write_col3 <= 9'd0;
	case (main_writes3)
		1'd1: begin
			main_bank_write_col3 <= main_dfi_p0_address;
		end
	endcase
end
always @(*) begin
	main_bank_write3 <= 1'd0;
	case (main_writes3)
		1'd1: begin
			main_bank_write3 <= (main_dfi_p0_bank == 2'd3);
		end
	endcase
end
assign main_bankmodel3_write_data = {main_dfi_p0_wrdata};
assign main_bankmodel3_write_mask = {main_dfi_p0_wrdata_mask};
assign main_bankmodel3_write = main_bank_write3;
assign main_bankmodel3_write_col = main_bank_write_col3;
assign main_reads3 = main_read;
always @(*) begin
	main_bankmodel3_read <= 1'd0;
	case (main_reads3)
		1'd1: begin
			main_bankmodel3_read <= (main_dfi_p0_bank == 2'd3);
		end
	endcase
end
always @(*) begin
	main_bankmodel3_read_col <= 9'd0;
	case (main_reads3)
		1'd1: begin
			main_bankmodel3_read_col <= main_dfi_p0_address;
		end
	endcase
end
assign main_banks_read = (((main_bankmodel0_read | main_bankmodel1_read) | main_bankmodel2_read) | main_bankmodel3_read);
assign main_banks_read_data = (((main_bankmodel0_read_data | main_bankmodel1_read_data) | main_bankmodel2_read_data) | main_bankmodel3_read_data);
assign {main_dfi_p0_rddata_valid} = main_new_banks_read3;
assign {main_dfi_p0_rddata} = main_new_banks_read_data3;
always @(*) begin
	main_activate <= 1'd0;
	if ((((~main_dfi_p0_cs_n) & (~main_dfi_p0_ras_n)) & main_dfi_p0_cas_n)) begin
		main_activate <= main_dfi_p0_we_n;
	end
end
always @(*) begin
	main_precharge <= 1'd0;
	if ((((~main_dfi_p0_cs_n) & (~main_dfi_p0_ras_n)) & main_dfi_p0_cas_n)) begin
		main_precharge <= (~main_dfi_p0_we_n);
	end
end
always @(*) begin
	main_read <= 1'd0;
	if ((((~main_dfi_p0_cs_n) & main_dfi_p0_ras_n) & (~main_dfi_p0_cas_n))) begin
		main_read <= main_dfi_p0_we_n;
	end
end
always @(*) begin
	main_write <= 1'd0;
	if ((((~main_dfi_p0_cs_n) & main_dfi_p0_ras_n) & (~main_dfi_p0_cas_n))) begin
		main_write <= (~main_dfi_p0_we_n);
	end
end
assign main_bankmodel0_wraddr = builder_slice_proxy0[22:0];
assign main_bankmodel0_rdaddr = builder_slice_proxy1[22:0];
always @(*) begin
	main_bankmodel0_write_port_adr <= 22'd0;
	if (main_bankmodel0_active) begin
		main_bankmodel0_write_port_adr <= main_bankmodel0_wraddr;
	end
end
always @(*) begin
	main_bankmodel0_write_port_we <= 4'd0;
	if (main_bankmodel0_active) begin
		if (4'd8) begin
			main_bankmodel0_write_port_we <= ({4{main_bankmodel0_write}} & (~main_bankmodel0_write_mask));
		end else begin
			main_bankmodel0_write_port_we <= main_bankmodel0_write;
		end
	end
end
always @(*) begin
	main_bankmodel0_write_port_dat_w <= 32'd0;
	if (main_bankmodel0_active) begin
		main_bankmodel0_write_port_dat_w <= main_bankmodel0_write_data;
	end
end
always @(*) begin
	main_bankmodel0_read_port_adr <= 22'd0;
	if (main_bankmodel0_active) begin
		if (main_bankmodel0_read) begin
			main_bankmodel0_read_port_adr <= main_bankmodel0_rdaddr;
		end
	end
end
always @(*) begin
	main_bankmodel0_read_data <= 32'd0;
	if (main_bankmodel0_active) begin
		if (main_bankmodel0_read) begin
			main_bankmodel0_read_data <= main_bankmodel0_read_port_dat_r;
		end
	end
end
assign main_bankmodel1_wraddr = builder_slice_proxy2[22:0];
assign main_bankmodel1_rdaddr = builder_slice_proxy3[22:0];
always @(*) begin
	main_bankmodel1_write_port_adr <= 22'd0;
	if (main_bankmodel1_active) begin
		main_bankmodel1_write_port_adr <= main_bankmodel1_wraddr;
	end
end
always @(*) begin
	main_bankmodel1_write_port_we <= 4'd0;
	if (main_bankmodel1_active) begin
		if (4'd8) begin
			main_bankmodel1_write_port_we <= ({4{main_bankmodel1_write}} & (~main_bankmodel1_write_mask));
		end else begin
			main_bankmodel1_write_port_we <= main_bankmodel1_write;
		end
	end
end
always @(*) begin
	main_bankmodel1_write_port_dat_w <= 32'd0;
	if (main_bankmodel1_active) begin
		main_bankmodel1_write_port_dat_w <= main_bankmodel1_write_data;
	end
end
always @(*) begin
	main_bankmodel1_read_port_adr <= 22'd0;
	if (main_bankmodel1_active) begin
		if (main_bankmodel1_read) begin
			main_bankmodel1_read_port_adr <= main_bankmodel1_rdaddr;
		end
	end
end
always @(*) begin
	main_bankmodel1_read_data <= 32'd0;
	if (main_bankmodel1_active) begin
		if (main_bankmodel1_read) begin
			main_bankmodel1_read_data <= main_bankmodel1_read_port_dat_r;
		end
	end
end
assign main_bankmodel2_wraddr = builder_slice_proxy4[22:0];
assign main_bankmodel2_rdaddr = builder_slice_proxy5[22:0];
always @(*) begin
	main_bankmodel2_write_port_we <= 4'd0;
	if (main_bankmodel2_active) begin
		if (4'd8) begin
			main_bankmodel2_write_port_we <= ({4{main_bankmodel2_write}} & (~main_bankmodel2_write_mask));
		end else begin
			main_bankmodel2_write_port_we <= main_bankmodel2_write;
		end
	end
end
always @(*) begin
	main_bankmodel2_write_port_dat_w <= 32'd0;
	if (main_bankmodel2_active) begin
		main_bankmodel2_write_port_dat_w <= main_bankmodel2_write_data;
	end
end
always @(*) begin
	main_bankmodel2_read_port_adr <= 22'd0;
	if (main_bankmodel2_active) begin
		if (main_bankmodel2_read) begin
			main_bankmodel2_read_port_adr <= main_bankmodel2_rdaddr;
		end
	end
end
always @(*) begin
	main_bankmodel2_read_data <= 32'd0;
	if (main_bankmodel2_active) begin
		if (main_bankmodel2_read) begin
			main_bankmodel2_read_data <= main_bankmodel2_read_port_dat_r;
		end
	end
end
always @(*) begin
	main_bankmodel2_write_port_adr <= 22'd0;
	if (main_bankmodel2_active) begin
		main_bankmodel2_write_port_adr <= main_bankmodel2_wraddr;
	end
end
assign main_bankmodel3_wraddr = builder_slice_proxy6[22:0];
assign main_bankmodel3_rdaddr = builder_slice_proxy7[22:0];
always @(*) begin
	main_bankmodel3_read_port_adr <= 22'd0;
	if (main_bankmodel3_active) begin
		if (main_bankmodel3_read) begin
			main_bankmodel3_read_port_adr <= main_bankmodel3_rdaddr;
		end
	end
end
always @(*) begin
	main_bankmodel3_read_data <= 32'd0;
	if (main_bankmodel3_active) begin
		if (main_bankmodel3_read) begin
			main_bankmodel3_read_data <= main_bankmodel3_read_port_dat_r;
		end
	end
end
always @(*) begin
	main_bankmodel3_write_port_adr <= 22'd0;
	if (main_bankmodel3_active) begin
		main_bankmodel3_write_port_adr <= main_bankmodel3_wraddr;
	end
end
always @(*) begin
	main_bankmodel3_write_port_we <= 4'd0;
	if (main_bankmodel3_active) begin
		if (4'd8) begin
			main_bankmodel3_write_port_we <= ({4{main_bankmodel3_write}} & (~main_bankmodel3_write_mask));
		end else begin
			main_bankmodel3_write_port_we <= main_bankmodel3_write;
		end
	end
end
always @(*) begin
	main_bankmodel3_write_port_dat_w <= 32'd0;
	if (main_bankmodel3_active) begin
		main_bankmodel3_write_port_dat_w <= main_bankmodel3_write_data;
	end
end
assign main_dfi_p0_address = main_sdram_master_p0_address;
assign main_dfi_p0_bank = main_sdram_master_p0_bank;
assign main_dfi_p0_cas_n = main_sdram_master_p0_cas_n;
assign main_dfi_p0_cs_n = main_sdram_master_p0_cs_n;
assign main_dfi_p0_ras_n = main_sdram_master_p0_ras_n;
assign main_dfi_p0_we_n = main_sdram_master_p0_we_n;
assign main_dfi_p0_cke = main_sdram_master_p0_cke;
assign main_dfi_p0_odt = main_sdram_master_p0_odt;
assign main_dfi_p0_reset_n = main_sdram_master_p0_reset_n;
assign main_dfi_p0_act_n = main_sdram_master_p0_act_n;
assign main_dfi_p0_wrdata = main_sdram_master_p0_wrdata;
assign main_dfi_p0_wrdata_en = main_sdram_master_p0_wrdata_en;
assign main_dfi_p0_wrdata_mask = main_sdram_master_p0_wrdata_mask;
assign main_dfi_p0_rddata_en = main_sdram_master_p0_rddata_en;
assign main_sdram_master_p0_rddata = main_dfi_p0_rddata;
assign main_sdram_master_p0_rddata_valid = main_dfi_p0_rddata_valid;
assign main_sdram_slave_p0_address = main_sdram_dfi_p0_address;
assign main_sdram_slave_p0_bank = main_sdram_dfi_p0_bank;
assign main_sdram_slave_p0_cas_n = main_sdram_dfi_p0_cas_n;
assign main_sdram_slave_p0_cs_n = main_sdram_dfi_p0_cs_n;
assign main_sdram_slave_p0_ras_n = main_sdram_dfi_p0_ras_n;
assign main_sdram_slave_p0_we_n = main_sdram_dfi_p0_we_n;
assign main_sdram_slave_p0_cke = main_sdram_dfi_p0_cke;
assign main_sdram_slave_p0_odt = main_sdram_dfi_p0_odt;
assign main_sdram_slave_p0_reset_n = main_sdram_dfi_p0_reset_n;
assign main_sdram_slave_p0_act_n = main_sdram_dfi_p0_act_n;
assign main_sdram_slave_p0_wrdata = main_sdram_dfi_p0_wrdata;
assign main_sdram_slave_p0_wrdata_en = main_sdram_dfi_p0_wrdata_en;
assign main_sdram_slave_p0_wrdata_mask = main_sdram_dfi_p0_wrdata_mask;
assign main_sdram_slave_p0_rddata_en = main_sdram_dfi_p0_rddata_en;
assign main_sdram_dfi_p0_rddata = main_sdram_slave_p0_rddata;
assign main_sdram_dfi_p0_rddata_valid = main_sdram_slave_p0_rddata_valid;
always @(*) begin
	main_sdram_ext_dfi_p0_rddata <= 32'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_ext_dfi_p0_rddata <= main_sdram_master_p0_rddata;
		end else begin
		end
	end else begin
	end
end
always @(*) begin
	main_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_ext_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
		end else begin
		end
	end else begin
	end
end
always @(*) begin
	main_sdram_slave_p0_rddata <= 32'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
		end else begin
			main_sdram_slave_p0_rddata <= main_sdram_master_p0_rddata;
		end
	end else begin
	end
end
always @(*) begin
	main_sdram_slave_p0_rddata_valid <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
		end else begin
			main_sdram_slave_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
		end
	end else begin
	end
end
always @(*) begin
	main_sdram_master_p0_address <= 13'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_address <= main_sdram_ext_dfi_p0_address;
		end else begin
			main_sdram_master_p0_address <= main_sdram_slave_p0_address;
		end
	end else begin
		main_sdram_master_p0_address <= main_sdram_csr_dfi_p0_address;
	end
end
always @(*) begin
	main_sdram_master_p0_bank <= 2'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_bank <= main_sdram_ext_dfi_p0_bank;
		end else begin
			main_sdram_master_p0_bank <= main_sdram_slave_p0_bank;
		end
	end else begin
		main_sdram_master_p0_bank <= main_sdram_csr_dfi_p0_bank;
	end
end
always @(*) begin
	main_sdram_master_p0_cas_n <= 1'd1;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_cas_n <= main_sdram_ext_dfi_p0_cas_n;
		end else begin
			main_sdram_master_p0_cas_n <= main_sdram_slave_p0_cas_n;
		end
	end else begin
		main_sdram_master_p0_cas_n <= main_sdram_csr_dfi_p0_cas_n;
	end
end
always @(*) begin
	main_sdram_master_p0_cs_n <= 1'd1;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_cs_n <= main_sdram_ext_dfi_p0_cs_n;
		end else begin
			main_sdram_master_p0_cs_n <= main_sdram_slave_p0_cs_n;
		end
	end else begin
		main_sdram_master_p0_cs_n <= main_sdram_csr_dfi_p0_cs_n;
	end
end
always @(*) begin
	main_sdram_master_p0_ras_n <= 1'd1;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_ras_n <= main_sdram_ext_dfi_p0_ras_n;
		end else begin
			main_sdram_master_p0_ras_n <= main_sdram_slave_p0_ras_n;
		end
	end else begin
		main_sdram_master_p0_ras_n <= main_sdram_csr_dfi_p0_ras_n;
	end
end
always @(*) begin
	main_sdram_master_p0_we_n <= 1'd1;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_we_n <= main_sdram_ext_dfi_p0_we_n;
		end else begin
			main_sdram_master_p0_we_n <= main_sdram_slave_p0_we_n;
		end
	end else begin
		main_sdram_master_p0_we_n <= main_sdram_csr_dfi_p0_we_n;
	end
end
always @(*) begin
	main_sdram_master_p0_cke <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_cke <= main_sdram_ext_dfi_p0_cke;
		end else begin
			main_sdram_master_p0_cke <= main_sdram_slave_p0_cke;
		end
	end else begin
		main_sdram_master_p0_cke <= main_sdram_csr_dfi_p0_cke;
	end
end
always @(*) begin
	main_sdram_master_p0_odt <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_odt <= main_sdram_ext_dfi_p0_odt;
		end else begin
			main_sdram_master_p0_odt <= main_sdram_slave_p0_odt;
		end
	end else begin
		main_sdram_master_p0_odt <= main_sdram_csr_dfi_p0_odt;
	end
end
always @(*) begin
	main_sdram_master_p0_reset_n <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_reset_n <= main_sdram_ext_dfi_p0_reset_n;
		end else begin
			main_sdram_master_p0_reset_n <= main_sdram_slave_p0_reset_n;
		end
	end else begin
		main_sdram_master_p0_reset_n <= main_sdram_csr_dfi_p0_reset_n;
	end
end
always @(*) begin
	main_sdram_master_p0_act_n <= 1'd1;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_act_n <= main_sdram_ext_dfi_p0_act_n;
		end else begin
			main_sdram_master_p0_act_n <= main_sdram_slave_p0_act_n;
		end
	end else begin
		main_sdram_master_p0_act_n <= main_sdram_csr_dfi_p0_act_n;
	end
end
always @(*) begin
	main_sdram_master_p0_wrdata <= 32'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_wrdata <= main_sdram_ext_dfi_p0_wrdata;
		end else begin
			main_sdram_master_p0_wrdata <= main_sdram_slave_p0_wrdata;
		end
	end else begin
		main_sdram_master_p0_wrdata <= main_sdram_csr_dfi_p0_wrdata;
	end
end
always @(*) begin
	main_sdram_master_p0_wrdata_en <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_wrdata_en <= main_sdram_ext_dfi_p0_wrdata_en;
		end else begin
			main_sdram_master_p0_wrdata_en <= main_sdram_slave_p0_wrdata_en;
		end
	end else begin
		main_sdram_master_p0_wrdata_en <= main_sdram_csr_dfi_p0_wrdata_en;
	end
end
always @(*) begin
	main_sdram_master_p0_wrdata_mask <= 4'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_wrdata_mask <= main_sdram_ext_dfi_p0_wrdata_mask;
		end else begin
			main_sdram_master_p0_wrdata_mask <= main_sdram_slave_p0_wrdata_mask;
		end
	end else begin
		main_sdram_master_p0_wrdata_mask <= main_sdram_csr_dfi_p0_wrdata_mask;
	end
end
always @(*) begin
	main_sdram_master_p0_rddata_en <= 1'd0;
	if (main_sdram_sel) begin
		if (main_sdram_ext_dfi_sel) begin
			main_sdram_master_p0_rddata_en <= main_sdram_ext_dfi_p0_rddata_en;
		end else begin
			main_sdram_master_p0_rddata_en <= main_sdram_slave_p0_rddata_en;
		end
	end else begin
		main_sdram_master_p0_rddata_en <= main_sdram_csr_dfi_p0_rddata_en;
	end
end
always @(*) begin
	main_sdram_csr_dfi_p0_rddata <= 32'd0;
	if (main_sdram_sel) begin
	end else begin
		main_sdram_csr_dfi_p0_rddata <= main_sdram_master_p0_rddata;
	end
end
always @(*) begin
	main_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
	if (main_sdram_sel) begin
	end else begin
		main_sdram_csr_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
	end
end
assign main_sdram_csr_dfi_p0_cke = main_sdram_cke;
assign main_sdram_csr_dfi_p0_odt = main_sdram_odt;
assign main_sdram_csr_dfi_p0_reset_n = main_sdram_reset_n;
always @(*) begin
	main_sdram_csr_dfi_p0_we_n <= 1'd1;
	if (main_sdram_command_issue_re) begin
		main_sdram_csr_dfi_p0_we_n <= (~main_sdram_csrfield_we);
	end else begin
		main_sdram_csr_dfi_p0_we_n <= 1'd1;
	end
end
always @(*) begin
	main_sdram_csr_dfi_p0_cas_n <= 1'd1;
	if (main_sdram_command_issue_re) begin
		main_sdram_csr_dfi_p0_cas_n <= (~main_sdram_csrfield_cas);
	end else begin
		main_sdram_csr_dfi_p0_cas_n <= 1'd1;
	end
end
always @(*) begin
	main_sdram_csr_dfi_p0_cs_n <= 1'd1;
	if (main_sdram_command_issue_re) begin
		main_sdram_csr_dfi_p0_cs_n <= {1{(~main_sdram_csrfield_cs)}};
	end else begin
		main_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
	end
end
always @(*) begin
	main_sdram_csr_dfi_p0_ras_n <= 1'd1;
	if (main_sdram_command_issue_re) begin
		main_sdram_csr_dfi_p0_ras_n <= (~main_sdram_csrfield_ras);
	end else begin
		main_sdram_csr_dfi_p0_ras_n <= 1'd1;
	end
end
assign main_sdram_csr_dfi_p0_address = main_sdram_address_storage;
assign main_sdram_csr_dfi_p0_bank = main_sdram_baddress_storage;
assign main_sdram_csr_dfi_p0_wrdata_en = (main_sdram_command_issue_re & main_sdram_csrfield_wren);
assign main_sdram_csr_dfi_p0_rddata_en = (main_sdram_command_issue_re & main_sdram_csrfield_rden);
assign main_sdram_csr_dfi_p0_wrdata = main_sdram_wrdata_storage;
assign main_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign main_sdram_bankmachine0_req_valid = main_sdram_interface_bank0_valid;
assign main_sdram_interface_bank0_ready = main_sdram_bankmachine0_req_ready;
assign main_sdram_bankmachine0_req_we = main_sdram_interface_bank0_we;
assign main_sdram_bankmachine0_req_addr = main_sdram_interface_bank0_addr;
assign main_sdram_interface_bank0_lock = main_sdram_bankmachine0_req_lock;
assign main_sdram_interface_bank0_wdata_ready = main_sdram_bankmachine0_req_wdata_ready;
assign main_sdram_interface_bank0_rdata_valid = main_sdram_bankmachine0_req_rdata_valid;
assign main_sdram_bankmachine1_req_valid = main_sdram_interface_bank1_valid;
assign main_sdram_interface_bank1_ready = main_sdram_bankmachine1_req_ready;
assign main_sdram_bankmachine1_req_we = main_sdram_interface_bank1_we;
assign main_sdram_bankmachine1_req_addr = main_sdram_interface_bank1_addr;
assign main_sdram_interface_bank1_lock = main_sdram_bankmachine1_req_lock;
assign main_sdram_interface_bank1_wdata_ready = main_sdram_bankmachine1_req_wdata_ready;
assign main_sdram_interface_bank1_rdata_valid = main_sdram_bankmachine1_req_rdata_valid;
assign main_sdram_bankmachine2_req_valid = main_sdram_interface_bank2_valid;
assign main_sdram_interface_bank2_ready = main_sdram_bankmachine2_req_ready;
assign main_sdram_bankmachine2_req_we = main_sdram_interface_bank2_we;
assign main_sdram_bankmachine2_req_addr = main_sdram_interface_bank2_addr;
assign main_sdram_interface_bank2_lock = main_sdram_bankmachine2_req_lock;
assign main_sdram_interface_bank2_wdata_ready = main_sdram_bankmachine2_req_wdata_ready;
assign main_sdram_interface_bank2_rdata_valid = main_sdram_bankmachine2_req_rdata_valid;
assign main_sdram_bankmachine3_req_valid = main_sdram_interface_bank3_valid;
assign main_sdram_interface_bank3_ready = main_sdram_bankmachine3_req_ready;
assign main_sdram_bankmachine3_req_we = main_sdram_interface_bank3_we;
assign main_sdram_bankmachine3_req_addr = main_sdram_interface_bank3_addr;
assign main_sdram_interface_bank3_lock = main_sdram_bankmachine3_req_lock;
assign main_sdram_interface_bank3_wdata_ready = main_sdram_bankmachine3_req_wdata_ready;
assign main_sdram_interface_bank3_rdata_valid = main_sdram_bankmachine3_req_rdata_valid;
assign main_sdram_timer_wait = (~main_sdram_timer_done0);
assign main_sdram_postponer_req_i = main_sdram_timer_done0;
assign main_sdram_wants_refresh = main_sdram_postponer_req_o;
assign main_sdram_timer_done1 = (main_sdram_timer_count1 == 1'd0);
assign main_sdram_timer_done0 = main_sdram_timer_done1;
assign main_sdram_timer_count0 = main_sdram_timer_count1;
assign main_sdram_sequencer_start1 = (main_sdram_sequencer_start0 | (main_sdram_sequencer_count != 1'd0));
assign main_sdram_sequencer_done0 = (main_sdram_sequencer_done1 & (main_sdram_sequencer_count == 1'd0));
always @(*) begin
	builder_simsoc_refresher_next_state <= 2'd0;
	builder_simsoc_refresher_next_state <= builder_simsoc_refresher_state;
	case (builder_simsoc_refresher_state)
		1'd1: begin
			if (main_sdram_cmd_ready) begin
				builder_simsoc_refresher_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (main_sdram_sequencer_done0) begin
				builder_simsoc_refresher_next_state <= 1'd0;
			end
		end
		default: begin
			if (1'd1) begin
				if (main_sdram_wants_refresh) begin
					builder_simsoc_refresher_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_cmd_valid <= 1'd0;
	case (builder_simsoc_refresher_state)
		1'd1: begin
			main_sdram_cmd_valid <= 1'd1;
		end
		2'd2: begin
			main_sdram_cmd_valid <= 1'd1;
			if (main_sdram_sequencer_done0) begin
				main_sdram_cmd_valid <= 1'd0;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_sequencer_start0 <= 1'd0;
	case (builder_simsoc_refresher_state)
		1'd1: begin
			if (main_sdram_cmd_ready) begin
				main_sdram_sequencer_start0 <= 1'd1;
			end
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_cmd_last <= 1'd0;
	case (builder_simsoc_refresher_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_sdram_sequencer_done0) begin
				main_sdram_cmd_last <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
assign main_sdram_bankmachine0_sink_valid = main_sdram_bankmachine0_req_valid;
assign main_sdram_bankmachine0_req_ready = main_sdram_bankmachine0_sink_ready;
assign main_sdram_bankmachine0_sink_payload_we = main_sdram_bankmachine0_req_we;
assign main_sdram_bankmachine0_sink_payload_addr = main_sdram_bankmachine0_req_addr;
assign main_sdram_bankmachine0_sink_sink_valid = main_sdram_bankmachine0_source_valid;
assign main_sdram_bankmachine0_source_ready = main_sdram_bankmachine0_sink_sink_ready;
assign main_sdram_bankmachine0_sink_sink_first = main_sdram_bankmachine0_source_first;
assign main_sdram_bankmachine0_sink_sink_last = main_sdram_bankmachine0_source_last;
assign main_sdram_bankmachine0_sink_sink_payload_we = main_sdram_bankmachine0_source_payload_we;
assign main_sdram_bankmachine0_sink_sink_payload_addr = main_sdram_bankmachine0_source_payload_addr;
assign main_sdram_bankmachine0_source_source_ready = (main_sdram_bankmachine0_req_wdata_ready | main_sdram_bankmachine0_req_rdata_valid);
assign main_sdram_bankmachine0_req_lock = (main_sdram_bankmachine0_source_valid | main_sdram_bankmachine0_source_source_valid);
assign main_sdram_bankmachine0_row_hit = (main_sdram_bankmachine0_row == main_sdram_bankmachine0_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine0_row_col_n_addr_sel) begin
		main_sdram_bankmachine0_cmd_payload_a <= main_sdram_bankmachine0_source_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine0_cmd_payload_a <= ((main_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_sdram_bankmachine0_source_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine0_twtpcon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_cmd_payload_is_write);
assign main_sdram_bankmachine0_trccon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
assign main_sdram_bankmachine0_trascon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
always @(*) begin
	main_sdram_bankmachine0_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine0_source_valid & main_sdram_bankmachine0_source_source_valid)) begin
		if ((main_sdram_bankmachine0_source_payload_addr[21:9] != main_sdram_bankmachine0_source_source_payload_addr[21:9])) begin
			main_sdram_bankmachine0_auto_precharge <= (main_sdram_bankmachine0_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine0_syncfifo0_din = {main_sdram_bankmachine0_fifo_in_last, main_sdram_bankmachine0_fifo_in_first, main_sdram_bankmachine0_fifo_in_payload_addr, main_sdram_bankmachine0_fifo_in_payload_we};
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign main_sdram_bankmachine0_sink_ready = main_sdram_bankmachine0_syncfifo0_writable;
assign main_sdram_bankmachine0_syncfifo0_we = main_sdram_bankmachine0_sink_valid;
assign main_sdram_bankmachine0_fifo_in_first = main_sdram_bankmachine0_sink_first;
assign main_sdram_bankmachine0_fifo_in_last = main_sdram_bankmachine0_sink_last;
assign main_sdram_bankmachine0_fifo_in_payload_we = main_sdram_bankmachine0_sink_payload_we;
assign main_sdram_bankmachine0_fifo_in_payload_addr = main_sdram_bankmachine0_sink_payload_addr;
assign main_sdram_bankmachine0_source_valid = main_sdram_bankmachine0_syncfifo0_readable;
assign main_sdram_bankmachine0_source_first = main_sdram_bankmachine0_fifo_out_first;
assign main_sdram_bankmachine0_source_last = main_sdram_bankmachine0_fifo_out_last;
assign main_sdram_bankmachine0_source_payload_we = main_sdram_bankmachine0_fifo_out_payload_we;
assign main_sdram_bankmachine0_source_payload_addr = main_sdram_bankmachine0_fifo_out_payload_addr;
assign main_sdram_bankmachine0_syncfifo0_re = main_sdram_bankmachine0_source_ready;
always @(*) begin
	main_sdram_bankmachine0_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine0_replace) begin
		main_sdram_bankmachine0_wrport_adr <= (main_sdram_bankmachine0_produce - 1'd1);
	end else begin
		main_sdram_bankmachine0_wrport_adr <= main_sdram_bankmachine0_produce;
	end
end
assign main_sdram_bankmachine0_wrport_dat_w = main_sdram_bankmachine0_syncfifo0_din;
assign main_sdram_bankmachine0_wrport_we = (main_sdram_bankmachine0_syncfifo0_we & (main_sdram_bankmachine0_syncfifo0_writable | main_sdram_bankmachine0_replace));
assign main_sdram_bankmachine0_do_read = (main_sdram_bankmachine0_syncfifo0_readable & main_sdram_bankmachine0_syncfifo0_re);
assign main_sdram_bankmachine0_rdport_adr = main_sdram_bankmachine0_consume;
assign main_sdram_bankmachine0_syncfifo0_dout = main_sdram_bankmachine0_rdport_dat_r;
assign main_sdram_bankmachine0_syncfifo0_writable = (main_sdram_bankmachine0_level != 4'd8);
assign main_sdram_bankmachine0_syncfifo0_readable = (main_sdram_bankmachine0_level != 1'd0);
assign main_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready);
assign main_sdram_bankmachine0_pipe_valid_sink_valid = main_sdram_bankmachine0_sink_sink_valid;
assign main_sdram_bankmachine0_sink_sink_ready = main_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_sdram_bankmachine0_pipe_valid_sink_first = main_sdram_bankmachine0_sink_sink_first;
assign main_sdram_bankmachine0_pipe_valid_sink_last = main_sdram_bankmachine0_sink_sink_last;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_we = main_sdram_bankmachine0_sink_sink_payload_we;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_sdram_bankmachine0_sink_sink_payload_addr;
assign main_sdram_bankmachine0_source_source_valid = main_sdram_bankmachine0_pipe_valid_source_valid;
assign main_sdram_bankmachine0_pipe_valid_source_ready = main_sdram_bankmachine0_source_source_ready;
assign main_sdram_bankmachine0_source_source_first = main_sdram_bankmachine0_pipe_valid_source_first;
assign main_sdram_bankmachine0_source_source_last = main_sdram_bankmachine0_pipe_valid_source_last;
assign main_sdram_bankmachine0_source_source_payload_we = main_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_sdram_bankmachine0_source_source_payload_addr = main_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
	builder_simsoc_bankmachine0_next_state <= 3'd0;
	builder_simsoc_bankmachine0_next_state <= builder_simsoc_bankmachine0_state;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				if (main_sdram_bankmachine0_cmd_ready) begin
					builder_simsoc_bankmachine0_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				builder_simsoc_bankmachine0_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				if (main_sdram_bankmachine0_cmd_ready) begin
					builder_simsoc_bankmachine0_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~main_sdram_bankmachine0_refresh_req)) begin
				builder_simsoc_bankmachine0_next_state <= 1'd0;
			end
		end
		3'd5: begin
			builder_simsoc_bankmachine0_next_state <= 2'd3;
		end
		3'd6: begin
			builder_simsoc_bankmachine0_next_state <= 1'd0;
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
				builder_simsoc_bankmachine0_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if ((main_sdram_bankmachine0_cmd_ready & main_sdram_bankmachine0_auto_precharge)) begin
								builder_simsoc_bankmachine0_next_state <= 2'd2;
							end
						end else begin
							builder_simsoc_bankmachine0_next_state <= 1'd1;
						end
					end else begin
						builder_simsoc_bankmachine0_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if (main_sdram_bankmachine0_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if (main_sdram_bankmachine0_source_source_payload_we) begin
								main_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_req_wdata_ready <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if (main_sdram_bankmachine0_source_source_payload_we) begin
								main_sdram_bankmachine0_req_wdata_ready <= main_sdram_bankmachine0_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_req_rdata_valid <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if (main_sdram_bankmachine0_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine0_req_rdata_valid <= main_sdram_bankmachine0_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_refresh_gnt <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_sdram_bankmachine0_twtpcon_ready) begin
				main_sdram_bankmachine0_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_row_open <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_valid <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				main_sdram_bankmachine0_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							main_sdram_bankmachine0_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_row_close <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			main_sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd2: begin
			main_sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			main_sdram_bankmachine0_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							main_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine0_trccon_ready) begin
				main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine0_cmd_payload_we <= 1'd0;
	case (builder_simsoc_bankmachine0_state)
		1'd1: begin
			if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
				main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine0_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine0_source_source_valid) begin
					if (main_sdram_bankmachine0_row_opened) begin
						if (main_sdram_bankmachine0_row_hit) begin
							if (main_sdram_bankmachine0_source_source_payload_we) begin
								main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine1_sink_valid = main_sdram_bankmachine1_req_valid;
assign main_sdram_bankmachine1_req_ready = main_sdram_bankmachine1_sink_ready;
assign main_sdram_bankmachine1_sink_payload_we = main_sdram_bankmachine1_req_we;
assign main_sdram_bankmachine1_sink_payload_addr = main_sdram_bankmachine1_req_addr;
assign main_sdram_bankmachine1_sink_sink_valid = main_sdram_bankmachine1_source_valid;
assign main_sdram_bankmachine1_source_ready = main_sdram_bankmachine1_sink_sink_ready;
assign main_sdram_bankmachine1_sink_sink_first = main_sdram_bankmachine1_source_first;
assign main_sdram_bankmachine1_sink_sink_last = main_sdram_bankmachine1_source_last;
assign main_sdram_bankmachine1_sink_sink_payload_we = main_sdram_bankmachine1_source_payload_we;
assign main_sdram_bankmachine1_sink_sink_payload_addr = main_sdram_bankmachine1_source_payload_addr;
assign main_sdram_bankmachine1_source_source_ready = (main_sdram_bankmachine1_req_wdata_ready | main_sdram_bankmachine1_req_rdata_valid);
assign main_sdram_bankmachine1_req_lock = (main_sdram_bankmachine1_source_valid | main_sdram_bankmachine1_source_source_valid);
assign main_sdram_bankmachine1_row_hit = (main_sdram_bankmachine1_row == main_sdram_bankmachine1_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine1_row_col_n_addr_sel) begin
		main_sdram_bankmachine1_cmd_payload_a <= main_sdram_bankmachine1_source_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine1_cmd_payload_a <= ((main_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_sdram_bankmachine1_source_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine1_twtpcon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_cmd_payload_is_write);
assign main_sdram_bankmachine1_trccon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
assign main_sdram_bankmachine1_trascon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
always @(*) begin
	main_sdram_bankmachine1_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine1_source_valid & main_sdram_bankmachine1_source_source_valid)) begin
		if ((main_sdram_bankmachine1_source_payload_addr[21:9] != main_sdram_bankmachine1_source_source_payload_addr[21:9])) begin
			main_sdram_bankmachine1_auto_precharge <= (main_sdram_bankmachine1_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine1_syncfifo1_din = {main_sdram_bankmachine1_fifo_in_last, main_sdram_bankmachine1_fifo_in_first, main_sdram_bankmachine1_fifo_in_payload_addr, main_sdram_bankmachine1_fifo_in_payload_we};
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign main_sdram_bankmachine1_sink_ready = main_sdram_bankmachine1_syncfifo1_writable;
assign main_sdram_bankmachine1_syncfifo1_we = main_sdram_bankmachine1_sink_valid;
assign main_sdram_bankmachine1_fifo_in_first = main_sdram_bankmachine1_sink_first;
assign main_sdram_bankmachine1_fifo_in_last = main_sdram_bankmachine1_sink_last;
assign main_sdram_bankmachine1_fifo_in_payload_we = main_sdram_bankmachine1_sink_payload_we;
assign main_sdram_bankmachine1_fifo_in_payload_addr = main_sdram_bankmachine1_sink_payload_addr;
assign main_sdram_bankmachine1_source_valid = main_sdram_bankmachine1_syncfifo1_readable;
assign main_sdram_bankmachine1_source_first = main_sdram_bankmachine1_fifo_out_first;
assign main_sdram_bankmachine1_source_last = main_sdram_bankmachine1_fifo_out_last;
assign main_sdram_bankmachine1_source_payload_we = main_sdram_bankmachine1_fifo_out_payload_we;
assign main_sdram_bankmachine1_source_payload_addr = main_sdram_bankmachine1_fifo_out_payload_addr;
assign main_sdram_bankmachine1_syncfifo1_re = main_sdram_bankmachine1_source_ready;
always @(*) begin
	main_sdram_bankmachine1_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine1_replace) begin
		main_sdram_bankmachine1_wrport_adr <= (main_sdram_bankmachine1_produce - 1'd1);
	end else begin
		main_sdram_bankmachine1_wrport_adr <= main_sdram_bankmachine1_produce;
	end
end
assign main_sdram_bankmachine1_wrport_dat_w = main_sdram_bankmachine1_syncfifo1_din;
assign main_sdram_bankmachine1_wrport_we = (main_sdram_bankmachine1_syncfifo1_we & (main_sdram_bankmachine1_syncfifo1_writable | main_sdram_bankmachine1_replace));
assign main_sdram_bankmachine1_do_read = (main_sdram_bankmachine1_syncfifo1_readable & main_sdram_bankmachine1_syncfifo1_re);
assign main_sdram_bankmachine1_rdport_adr = main_sdram_bankmachine1_consume;
assign main_sdram_bankmachine1_syncfifo1_dout = main_sdram_bankmachine1_rdport_dat_r;
assign main_sdram_bankmachine1_syncfifo1_writable = (main_sdram_bankmachine1_level != 4'd8);
assign main_sdram_bankmachine1_syncfifo1_readable = (main_sdram_bankmachine1_level != 1'd0);
assign main_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready);
assign main_sdram_bankmachine1_pipe_valid_sink_valid = main_sdram_bankmachine1_sink_sink_valid;
assign main_sdram_bankmachine1_sink_sink_ready = main_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_sdram_bankmachine1_pipe_valid_sink_first = main_sdram_bankmachine1_sink_sink_first;
assign main_sdram_bankmachine1_pipe_valid_sink_last = main_sdram_bankmachine1_sink_sink_last;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_we = main_sdram_bankmachine1_sink_sink_payload_we;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_sdram_bankmachine1_sink_sink_payload_addr;
assign main_sdram_bankmachine1_source_source_valid = main_sdram_bankmachine1_pipe_valid_source_valid;
assign main_sdram_bankmachine1_pipe_valid_source_ready = main_sdram_bankmachine1_source_source_ready;
assign main_sdram_bankmachine1_source_source_first = main_sdram_bankmachine1_pipe_valid_source_first;
assign main_sdram_bankmachine1_source_source_last = main_sdram_bankmachine1_pipe_valid_source_last;
assign main_sdram_bankmachine1_source_source_payload_we = main_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_sdram_bankmachine1_source_source_payload_addr = main_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
	builder_simsoc_bankmachine1_next_state <= 3'd0;
	builder_simsoc_bankmachine1_next_state <= builder_simsoc_bankmachine1_state;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				if (main_sdram_bankmachine1_cmd_ready) begin
					builder_simsoc_bankmachine1_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				builder_simsoc_bankmachine1_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				if (main_sdram_bankmachine1_cmd_ready) begin
					builder_simsoc_bankmachine1_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~main_sdram_bankmachine1_refresh_req)) begin
				builder_simsoc_bankmachine1_next_state <= 1'd0;
			end
		end
		3'd5: begin
			builder_simsoc_bankmachine1_next_state <= 2'd3;
		end
		3'd6: begin
			builder_simsoc_bankmachine1_next_state <= 1'd0;
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
				builder_simsoc_bankmachine1_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if ((main_sdram_bankmachine1_cmd_ready & main_sdram_bankmachine1_auto_precharge)) begin
								builder_simsoc_bankmachine1_next_state <= 2'd2;
							end
						end else begin
							builder_simsoc_bankmachine1_next_state <= 1'd1;
						end
					end else begin
						builder_simsoc_bankmachine1_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_req_rdata_valid <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if (main_sdram_bankmachine1_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine1_req_rdata_valid <= main_sdram_bankmachine1_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_refresh_gnt <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_sdram_bankmachine1_twtpcon_ready) begin
				main_sdram_bankmachine1_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_row_open <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_valid <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				main_sdram_bankmachine1_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							main_sdram_bankmachine1_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_row_close <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			main_sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd2: begin
			main_sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			main_sdram_bankmachine1_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							main_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_we <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if (main_sdram_bankmachine1_source_source_payload_we) begin
								main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
			if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
				main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine1_trccon_ready) begin
				main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if (main_sdram_bankmachine1_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if (main_sdram_bankmachine1_source_source_payload_we) begin
								main_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine1_req_wdata_ready <= 1'd0;
	case (builder_simsoc_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine1_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine1_source_source_valid) begin
					if (main_sdram_bankmachine1_row_opened) begin
						if (main_sdram_bankmachine1_row_hit) begin
							if (main_sdram_bankmachine1_source_source_payload_we) begin
								main_sdram_bankmachine1_req_wdata_ready <= main_sdram_bankmachine1_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine2_sink_valid = main_sdram_bankmachine2_req_valid;
assign main_sdram_bankmachine2_req_ready = main_sdram_bankmachine2_sink_ready;
assign main_sdram_bankmachine2_sink_payload_we = main_sdram_bankmachine2_req_we;
assign main_sdram_bankmachine2_sink_payload_addr = main_sdram_bankmachine2_req_addr;
assign main_sdram_bankmachine2_sink_sink_valid = main_sdram_bankmachine2_source_valid;
assign main_sdram_bankmachine2_source_ready = main_sdram_bankmachine2_sink_sink_ready;
assign main_sdram_bankmachine2_sink_sink_first = main_sdram_bankmachine2_source_first;
assign main_sdram_bankmachine2_sink_sink_last = main_sdram_bankmachine2_source_last;
assign main_sdram_bankmachine2_sink_sink_payload_we = main_sdram_bankmachine2_source_payload_we;
assign main_sdram_bankmachine2_sink_sink_payload_addr = main_sdram_bankmachine2_source_payload_addr;
assign main_sdram_bankmachine2_source_source_ready = (main_sdram_bankmachine2_req_wdata_ready | main_sdram_bankmachine2_req_rdata_valid);
assign main_sdram_bankmachine2_req_lock = (main_sdram_bankmachine2_source_valid | main_sdram_bankmachine2_source_source_valid);
assign main_sdram_bankmachine2_row_hit = (main_sdram_bankmachine2_row == main_sdram_bankmachine2_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine2_row_col_n_addr_sel) begin
		main_sdram_bankmachine2_cmd_payload_a <= main_sdram_bankmachine2_source_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine2_cmd_payload_a <= ((main_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_sdram_bankmachine2_source_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine2_twtpcon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_cmd_payload_is_write);
assign main_sdram_bankmachine2_trccon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
assign main_sdram_bankmachine2_trascon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
always @(*) begin
	main_sdram_bankmachine2_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine2_source_valid & main_sdram_bankmachine2_source_source_valid)) begin
		if ((main_sdram_bankmachine2_source_payload_addr[21:9] != main_sdram_bankmachine2_source_source_payload_addr[21:9])) begin
			main_sdram_bankmachine2_auto_precharge <= (main_sdram_bankmachine2_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine2_syncfifo2_din = {main_sdram_bankmachine2_fifo_in_last, main_sdram_bankmachine2_fifo_in_first, main_sdram_bankmachine2_fifo_in_payload_addr, main_sdram_bankmachine2_fifo_in_payload_we};
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign main_sdram_bankmachine2_sink_ready = main_sdram_bankmachine2_syncfifo2_writable;
assign main_sdram_bankmachine2_syncfifo2_we = main_sdram_bankmachine2_sink_valid;
assign main_sdram_bankmachine2_fifo_in_first = main_sdram_bankmachine2_sink_first;
assign main_sdram_bankmachine2_fifo_in_last = main_sdram_bankmachine2_sink_last;
assign main_sdram_bankmachine2_fifo_in_payload_we = main_sdram_bankmachine2_sink_payload_we;
assign main_sdram_bankmachine2_fifo_in_payload_addr = main_sdram_bankmachine2_sink_payload_addr;
assign main_sdram_bankmachine2_source_valid = main_sdram_bankmachine2_syncfifo2_readable;
assign main_sdram_bankmachine2_source_first = main_sdram_bankmachine2_fifo_out_first;
assign main_sdram_bankmachine2_source_last = main_sdram_bankmachine2_fifo_out_last;
assign main_sdram_bankmachine2_source_payload_we = main_sdram_bankmachine2_fifo_out_payload_we;
assign main_sdram_bankmachine2_source_payload_addr = main_sdram_bankmachine2_fifo_out_payload_addr;
assign main_sdram_bankmachine2_syncfifo2_re = main_sdram_bankmachine2_source_ready;
always @(*) begin
	main_sdram_bankmachine2_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine2_replace) begin
		main_sdram_bankmachine2_wrport_adr <= (main_sdram_bankmachine2_produce - 1'd1);
	end else begin
		main_sdram_bankmachine2_wrport_adr <= main_sdram_bankmachine2_produce;
	end
end
assign main_sdram_bankmachine2_wrport_dat_w = main_sdram_bankmachine2_syncfifo2_din;
assign main_sdram_bankmachine2_wrport_we = (main_sdram_bankmachine2_syncfifo2_we & (main_sdram_bankmachine2_syncfifo2_writable | main_sdram_bankmachine2_replace));
assign main_sdram_bankmachine2_do_read = (main_sdram_bankmachine2_syncfifo2_readable & main_sdram_bankmachine2_syncfifo2_re);
assign main_sdram_bankmachine2_rdport_adr = main_sdram_bankmachine2_consume;
assign main_sdram_bankmachine2_syncfifo2_dout = main_sdram_bankmachine2_rdport_dat_r;
assign main_sdram_bankmachine2_syncfifo2_writable = (main_sdram_bankmachine2_level != 4'd8);
assign main_sdram_bankmachine2_syncfifo2_readable = (main_sdram_bankmachine2_level != 1'd0);
assign main_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready);
assign main_sdram_bankmachine2_pipe_valid_sink_valid = main_sdram_bankmachine2_sink_sink_valid;
assign main_sdram_bankmachine2_sink_sink_ready = main_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_sdram_bankmachine2_pipe_valid_sink_first = main_sdram_bankmachine2_sink_sink_first;
assign main_sdram_bankmachine2_pipe_valid_sink_last = main_sdram_bankmachine2_sink_sink_last;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_we = main_sdram_bankmachine2_sink_sink_payload_we;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_sdram_bankmachine2_sink_sink_payload_addr;
assign main_sdram_bankmachine2_source_source_valid = main_sdram_bankmachine2_pipe_valid_source_valid;
assign main_sdram_bankmachine2_pipe_valid_source_ready = main_sdram_bankmachine2_source_source_ready;
assign main_sdram_bankmachine2_source_source_first = main_sdram_bankmachine2_pipe_valid_source_first;
assign main_sdram_bankmachine2_source_source_last = main_sdram_bankmachine2_pipe_valid_source_last;
assign main_sdram_bankmachine2_source_source_payload_we = main_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_sdram_bankmachine2_source_source_payload_addr = main_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
	builder_simsoc_bankmachine2_next_state <= 3'd0;
	builder_simsoc_bankmachine2_next_state <= builder_simsoc_bankmachine2_state;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				if (main_sdram_bankmachine2_cmd_ready) begin
					builder_simsoc_bankmachine2_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				builder_simsoc_bankmachine2_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				if (main_sdram_bankmachine2_cmd_ready) begin
					builder_simsoc_bankmachine2_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~main_sdram_bankmachine2_refresh_req)) begin
				builder_simsoc_bankmachine2_next_state <= 1'd0;
			end
		end
		3'd5: begin
			builder_simsoc_bankmachine2_next_state <= 2'd3;
		end
		3'd6: begin
			builder_simsoc_bankmachine2_next_state <= 1'd0;
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
				builder_simsoc_bankmachine2_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if ((main_sdram_bankmachine2_cmd_ready & main_sdram_bankmachine2_auto_precharge)) begin
								builder_simsoc_bankmachine2_next_state <= 2'd2;
							end
						end else begin
							builder_simsoc_bankmachine2_next_state <= 1'd1;
						end
					end else begin
						builder_simsoc_bankmachine2_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_row_close <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			main_sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd2: begin
			main_sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			main_sdram_bankmachine2_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							main_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_we <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if (main_sdram_bankmachine2_source_source_payload_we) begin
								main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if (main_sdram_bankmachine2_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if (main_sdram_bankmachine2_source_source_payload_we) begin
								main_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_req_wdata_ready <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if (main_sdram_bankmachine2_source_source_payload_we) begin
								main_sdram_bankmachine2_req_wdata_ready <= main_sdram_bankmachine2_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_req_rdata_valid <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							if (main_sdram_bankmachine2_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine2_req_rdata_valid <= main_sdram_bankmachine2_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_refresh_gnt <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_sdram_bankmachine2_twtpcon_ready) begin
				main_sdram_bankmachine2_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_row_open <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine2_cmd_valid <= 1'd0;
	case (builder_simsoc_bankmachine2_state)
		1'd1: begin
			if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
				main_sdram_bankmachine2_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine2_trccon_ready) begin
				main_sdram_bankmachine2_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine2_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine2_source_source_valid) begin
					if (main_sdram_bankmachine2_row_opened) begin
						if (main_sdram_bankmachine2_row_hit) begin
							main_sdram_bankmachine2_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
assign main_sdram_bankmachine3_sink_valid = main_sdram_bankmachine3_req_valid;
assign main_sdram_bankmachine3_req_ready = main_sdram_bankmachine3_sink_ready;
assign main_sdram_bankmachine3_sink_payload_we = main_sdram_bankmachine3_req_we;
assign main_sdram_bankmachine3_sink_payload_addr = main_sdram_bankmachine3_req_addr;
assign main_sdram_bankmachine3_sink_sink_valid = main_sdram_bankmachine3_source_valid;
assign main_sdram_bankmachine3_source_ready = main_sdram_bankmachine3_sink_sink_ready;
assign main_sdram_bankmachine3_sink_sink_first = main_sdram_bankmachine3_source_first;
assign main_sdram_bankmachine3_sink_sink_last = main_sdram_bankmachine3_source_last;
assign main_sdram_bankmachine3_sink_sink_payload_we = main_sdram_bankmachine3_source_payload_we;
assign main_sdram_bankmachine3_sink_sink_payload_addr = main_sdram_bankmachine3_source_payload_addr;
assign main_sdram_bankmachine3_source_source_ready = (main_sdram_bankmachine3_req_wdata_ready | main_sdram_bankmachine3_req_rdata_valid);
assign main_sdram_bankmachine3_req_lock = (main_sdram_bankmachine3_source_valid | main_sdram_bankmachine3_source_source_valid);
assign main_sdram_bankmachine3_row_hit = (main_sdram_bankmachine3_row == main_sdram_bankmachine3_source_source_payload_addr[21:9]);
assign main_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_a <= 13'd0;
	if (main_sdram_bankmachine3_row_col_n_addr_sel) begin
		main_sdram_bankmachine3_cmd_payload_a <= main_sdram_bankmachine3_source_source_payload_addr[21:9];
	end else begin
		main_sdram_bankmachine3_cmd_payload_a <= ((main_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_sdram_bankmachine3_source_source_payload_addr[8:0], {0{1'd0}}});
	end
end
assign main_sdram_bankmachine3_twtpcon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_cmd_payload_is_write);
assign main_sdram_bankmachine3_trccon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
assign main_sdram_bankmachine3_trascon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
always @(*) begin
	main_sdram_bankmachine3_auto_precharge <= 1'd0;
	if ((main_sdram_bankmachine3_source_valid & main_sdram_bankmachine3_source_source_valid)) begin
		if ((main_sdram_bankmachine3_source_payload_addr[21:9] != main_sdram_bankmachine3_source_source_payload_addr[21:9])) begin
			main_sdram_bankmachine3_auto_precharge <= (main_sdram_bankmachine3_row_close == 1'd0);
		end
	end
end
assign main_sdram_bankmachine3_syncfifo3_din = {main_sdram_bankmachine3_fifo_in_last, main_sdram_bankmachine3_fifo_in_first, main_sdram_bankmachine3_fifo_in_payload_addr, main_sdram_bankmachine3_fifo_in_payload_we};
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign main_sdram_bankmachine3_sink_ready = main_sdram_bankmachine3_syncfifo3_writable;
assign main_sdram_bankmachine3_syncfifo3_we = main_sdram_bankmachine3_sink_valid;
assign main_sdram_bankmachine3_fifo_in_first = main_sdram_bankmachine3_sink_first;
assign main_sdram_bankmachine3_fifo_in_last = main_sdram_bankmachine3_sink_last;
assign main_sdram_bankmachine3_fifo_in_payload_we = main_sdram_bankmachine3_sink_payload_we;
assign main_sdram_bankmachine3_fifo_in_payload_addr = main_sdram_bankmachine3_sink_payload_addr;
assign main_sdram_bankmachine3_source_valid = main_sdram_bankmachine3_syncfifo3_readable;
assign main_sdram_bankmachine3_source_first = main_sdram_bankmachine3_fifo_out_first;
assign main_sdram_bankmachine3_source_last = main_sdram_bankmachine3_fifo_out_last;
assign main_sdram_bankmachine3_source_payload_we = main_sdram_bankmachine3_fifo_out_payload_we;
assign main_sdram_bankmachine3_source_payload_addr = main_sdram_bankmachine3_fifo_out_payload_addr;
assign main_sdram_bankmachine3_syncfifo3_re = main_sdram_bankmachine3_source_ready;
always @(*) begin
	main_sdram_bankmachine3_wrport_adr <= 3'd0;
	if (main_sdram_bankmachine3_replace) begin
		main_sdram_bankmachine3_wrport_adr <= (main_sdram_bankmachine3_produce - 1'd1);
	end else begin
		main_sdram_bankmachine3_wrport_adr <= main_sdram_bankmachine3_produce;
	end
end
assign main_sdram_bankmachine3_wrport_dat_w = main_sdram_bankmachine3_syncfifo3_din;
assign main_sdram_bankmachine3_wrport_we = (main_sdram_bankmachine3_syncfifo3_we & (main_sdram_bankmachine3_syncfifo3_writable | main_sdram_bankmachine3_replace));
assign main_sdram_bankmachine3_do_read = (main_sdram_bankmachine3_syncfifo3_readable & main_sdram_bankmachine3_syncfifo3_re);
assign main_sdram_bankmachine3_rdport_adr = main_sdram_bankmachine3_consume;
assign main_sdram_bankmachine3_syncfifo3_dout = main_sdram_bankmachine3_rdport_dat_r;
assign main_sdram_bankmachine3_syncfifo3_writable = (main_sdram_bankmachine3_level != 4'd8);
assign main_sdram_bankmachine3_syncfifo3_readable = (main_sdram_bankmachine3_level != 1'd0);
assign main_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready);
assign main_sdram_bankmachine3_pipe_valid_sink_valid = main_sdram_bankmachine3_sink_sink_valid;
assign main_sdram_bankmachine3_sink_sink_ready = main_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_sdram_bankmachine3_pipe_valid_sink_first = main_sdram_bankmachine3_sink_sink_first;
assign main_sdram_bankmachine3_pipe_valid_sink_last = main_sdram_bankmachine3_sink_sink_last;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_we = main_sdram_bankmachine3_sink_sink_payload_we;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_sdram_bankmachine3_sink_sink_payload_addr;
assign main_sdram_bankmachine3_source_source_valid = main_sdram_bankmachine3_pipe_valid_source_valid;
assign main_sdram_bankmachine3_pipe_valid_source_ready = main_sdram_bankmachine3_source_source_ready;
assign main_sdram_bankmachine3_source_source_first = main_sdram_bankmachine3_pipe_valid_source_first;
assign main_sdram_bankmachine3_source_source_last = main_sdram_bankmachine3_pipe_valid_source_last;
assign main_sdram_bankmachine3_source_source_payload_we = main_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_sdram_bankmachine3_source_source_payload_addr = main_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
	builder_simsoc_bankmachine3_next_state <= 3'd0;
	builder_simsoc_bankmachine3_next_state <= builder_simsoc_bankmachine3_state;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				if (main_sdram_bankmachine3_cmd_ready) begin
					builder_simsoc_bankmachine3_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				builder_simsoc_bankmachine3_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				if (main_sdram_bankmachine3_cmd_ready) begin
					builder_simsoc_bankmachine3_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~main_sdram_bankmachine3_refresh_req)) begin
				builder_simsoc_bankmachine3_next_state <= 1'd0;
			end
		end
		3'd5: begin
			builder_simsoc_bankmachine3_next_state <= 2'd3;
		end
		3'd6: begin
			builder_simsoc_bankmachine3_next_state <= 1'd0;
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
				builder_simsoc_bankmachine3_next_state <= 3'd4;
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if ((main_sdram_bankmachine3_cmd_ready & main_sdram_bankmachine3_auto_precharge)) begin
								builder_simsoc_bankmachine3_next_state <= 2'd2;
							end
						end else begin
							builder_simsoc_bankmachine3_next_state <= 1'd1;
						end
					end else begin
						builder_simsoc_bankmachine3_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							main_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_we <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if (main_sdram_bankmachine3_source_source_payload_we) begin
								main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if (main_sdram_bankmachine3_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if (main_sdram_bankmachine3_source_source_payload_we) begin
								main_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_req_wdata_ready <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if (main_sdram_bankmachine3_source_source_payload_we) begin
								main_sdram_bankmachine3_req_wdata_ready <= main_sdram_bankmachine3_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_req_rdata_valid <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							if (main_sdram_bankmachine3_source_source_payload_we) begin
							end else begin
								main_sdram_bankmachine3_req_rdata_valid <= main_sdram_bankmachine3_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_refresh_gnt <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (main_sdram_bankmachine3_twtpcon_ready) begin
				main_sdram_bankmachine3_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_row_open <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_cmd_valid <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
				main_sdram_bankmachine3_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (main_sdram_bankmachine3_refresh_req) begin
			end else begin
				if (main_sdram_bankmachine3_source_source_valid) begin
					if (main_sdram_bankmachine3_row_opened) begin
						if (main_sdram_bankmachine3_row_hit) begin
							main_sdram_bankmachine3_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_row_close <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
			main_sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd2: begin
			main_sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			main_sdram_bankmachine3_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
	case (builder_simsoc_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_sdram_bankmachine3_trccon_ready) begin
				main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
assign main_sdram_choose_req_want_cmds = 1'd1;
always @(*) begin
	main_sdram_choose_req_want_activates <= 1'd0;
	main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			if (1'd1) begin
			end else begin
				main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (1'd1) begin
			end else begin
				main_sdram_choose_req_want_activates <= main_sdram_ras_allowed;
			end
		end
	endcase
end
assign main_sdram_trrdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_tfawcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & ((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we)));
assign main_sdram_ras_allowed = (main_sdram_trrdcon_ready & main_sdram_tfawcon_ready);
assign main_sdram_tccdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_cmd_payload_is_write | main_sdram_choose_req_cmd_payload_is_read));
assign main_sdram_cas_allowed = main_sdram_tccdcon_ready;
assign main_sdram_twtrcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
assign main_sdram_read_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_read) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_read)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_read)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_read));
assign main_sdram_write_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_write) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_write)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_write)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_write));
assign main_sdram_max_time0 = (main_sdram_time0 == 1'd0);
assign main_sdram_max_time1 = (main_sdram_time1 == 1'd0);
assign main_sdram_bankmachine0_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine1_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine2_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine3_refresh_req = main_sdram_cmd_valid;
assign main_sdram_go_to_refresh = (((main_sdram_bankmachine0_refresh_gnt & main_sdram_bankmachine1_refresh_gnt) & main_sdram_bankmachine2_refresh_gnt) & main_sdram_bankmachine3_refresh_gnt);
assign main_sdram_interface_rdata = {main_sdram_dfi_p0_rddata};
assign {main_sdram_dfi_p0_wrdata} = main_sdram_interface_wdata;
assign {main_sdram_dfi_p0_wrdata_mask} = (~main_sdram_interface_wdata_we);
always @(*) begin
	main_sdram_choose_cmd_valids <= 4'd0;
	main_sdram_choose_cmd_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
	main_sdram_choose_cmd_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
end
assign main_sdram_choose_cmd_request = main_sdram_choose_cmd_valids;
assign main_sdram_choose_cmd_cmd_valid = builder_rhs_array_muxed0;
assign main_sdram_choose_cmd_cmd_payload_a = builder_rhs_array_muxed1;
assign main_sdram_choose_cmd_cmd_payload_ba = builder_rhs_array_muxed2;
assign main_sdram_choose_cmd_cmd_payload_is_read = builder_rhs_array_muxed3;
assign main_sdram_choose_cmd_cmd_payload_is_write = builder_rhs_array_muxed4;
assign main_sdram_choose_cmd_cmd_payload_is_cmd = builder_rhs_array_muxed5;
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_cas <= builder_t_array_muxed0;
	end
end
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_ras <= builder_t_array_muxed1;
	end
end
always @(*) begin
	main_sdram_choose_cmd_cmd_payload_we <= 1'd0;
	if (main_sdram_choose_cmd_cmd_valid) begin
		main_sdram_choose_cmd_cmd_payload_we <= builder_t_array_muxed2;
	end
end
always @(*) begin
	main_sdram_bankmachine0_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd0))) begin
		main_sdram_bankmachine0_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd0))) begin
		main_sdram_bankmachine0_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine1_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd1))) begin
		main_sdram_bankmachine1_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd1))) begin
		main_sdram_bankmachine1_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine2_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd2))) begin
		main_sdram_bankmachine2_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd2))) begin
		main_sdram_bankmachine2_cmd_ready <= 1'd1;
	end
end
always @(*) begin
	main_sdram_bankmachine3_cmd_ready <= 1'd0;
	if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd3))) begin
		main_sdram_bankmachine3_cmd_ready <= 1'd1;
	end
	if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd3))) begin
		main_sdram_bankmachine3_cmd_ready <= 1'd1;
	end
end
assign main_sdram_choose_cmd_ce = (main_sdram_choose_cmd_cmd_ready | (~main_sdram_choose_cmd_cmd_valid));
always @(*) begin
	main_sdram_choose_req_valids <= 4'd0;
	main_sdram_choose_req_valids[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
	main_sdram_choose_req_valids[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
end
assign main_sdram_choose_req_request = main_sdram_choose_req_valids;
assign main_sdram_choose_req_cmd_valid = builder_rhs_array_muxed6;
assign main_sdram_choose_req_cmd_payload_a = builder_rhs_array_muxed7;
assign main_sdram_choose_req_cmd_payload_ba = builder_rhs_array_muxed8;
assign main_sdram_choose_req_cmd_payload_is_read = builder_rhs_array_muxed9;
assign main_sdram_choose_req_cmd_payload_is_write = builder_rhs_array_muxed10;
assign main_sdram_choose_req_cmd_payload_is_cmd = builder_rhs_array_muxed11;
always @(*) begin
	main_sdram_choose_req_cmd_payload_cas <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_cas <= builder_t_array_muxed3;
	end
end
always @(*) begin
	main_sdram_choose_req_cmd_payload_ras <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_ras <= builder_t_array_muxed4;
	end
end
always @(*) begin
	main_sdram_choose_req_cmd_payload_we <= 1'd0;
	if (main_sdram_choose_req_cmd_valid) begin
		main_sdram_choose_req_cmd_payload_we <= builder_t_array_muxed5;
	end
end
assign main_sdram_choose_req_ce = (main_sdram_choose_req_cmd_ready | (~main_sdram_choose_req_cmd_valid));
assign main_sdram_dfi_p0_reset_n = 1'd1;
assign main_sdram_dfi_p0_cke = {1{main_sdram_steerer0}};
assign main_sdram_dfi_p0_odt = {1{main_sdram_steerer1}};
always @(*) begin
	builder_simsoc_multiplexer_next_state <= 3'd0;
	builder_simsoc_multiplexer_next_state <= builder_simsoc_multiplexer_state;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			if (main_sdram_read_available) begin
				if (((~main_sdram_write_available) | main_sdram_max_time1)) begin
					builder_simsoc_multiplexer_next_state <= 2'd3;
				end
			end
			if (main_sdram_go_to_refresh) begin
				builder_simsoc_multiplexer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (main_sdram_cmd_last) begin
				builder_simsoc_multiplexer_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (main_sdram_twtrcon_ready) begin
				builder_simsoc_multiplexer_next_state <= 1'd0;
			end
		end
		3'd4: begin
			builder_simsoc_multiplexer_next_state <= 3'd5;
		end
		3'd5: begin
			builder_simsoc_multiplexer_next_state <= 3'd6;
		end
		3'd6: begin
			builder_simsoc_multiplexer_next_state <= 1'd1;
		end
		default: begin
			if (main_sdram_write_available) begin
				if (((~main_sdram_read_available) | main_sdram_max_time0)) begin
					builder_simsoc_multiplexer_next_state <= 3'd4;
				end
			end
			if (main_sdram_go_to_refresh) begin
				builder_simsoc_multiplexer_next_state <= 2'd2;
			end
		end
	endcase
end
always @(*) begin
	main_sdram_choose_req_want_reads <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			main_sdram_choose_req_want_reads <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_sdram_choose_req_want_writes <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			main_sdram_choose_req_want_writes <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_cmd_ready <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
			main_sdram_cmd_ready <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_choose_req_cmd_ready <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			if (1'd1) begin
				main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
			end else begin
				main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
				main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (1'd1) begin
				main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
			end else begin
				main_sdram_choose_req_cmd_ready <= ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed);
				main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
			end
		end
	endcase
end
always @(*) begin
	main_sdram_steerer_sel <= 2'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			main_sdram_steerer_sel <= 1'd0;
			if (1'd1) begin
				main_sdram_steerer_sel <= 2'd2;
			end
			if (1'd1) begin
				main_sdram_steerer_sel <= 1'd1;
			end
		end
		2'd2: begin
			main_sdram_steerer_sel <= 2'd3;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			main_sdram_steerer_sel <= 1'd0;
			if (1'd1) begin
				main_sdram_steerer_sel <= 2'd2;
			end
			if (1'd1) begin
				main_sdram_steerer_sel <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_sdram_en1 <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
			main_sdram_en1 <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_sdram_en0 <= 1'd0;
	case (builder_simsoc_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			main_sdram_en0 <= 1'd1;
		end
	endcase
end
assign builder_simsoc_roundrobin0_request = {(((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_simsoc_locked0 | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_simsoc_roundrobin0_ce = ((~main_sdram_interface_bank0_valid) & (~main_sdram_interface_bank0_lock));
assign main_sdram_interface_bank0_addr = builder_rhs_array_muxed12;
assign main_sdram_interface_bank0_we = builder_rhs_array_muxed13;
assign main_sdram_interface_bank0_valid = builder_rhs_array_muxed14;
assign builder_simsoc_roundrobin1_request = {(((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_simsoc_locked1 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_simsoc_roundrobin1_ce = ((~main_sdram_interface_bank1_valid) & (~main_sdram_interface_bank1_lock));
assign main_sdram_interface_bank1_addr = builder_rhs_array_muxed15;
assign main_sdram_interface_bank1_we = builder_rhs_array_muxed16;
assign main_sdram_interface_bank1_valid = builder_rhs_array_muxed17;
assign builder_simsoc_roundrobin2_request = {(((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_simsoc_locked2 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_simsoc_roundrobin2_ce = ((~main_sdram_interface_bank2_valid) & (~main_sdram_interface_bank2_lock));
assign main_sdram_interface_bank2_addr = builder_rhs_array_muxed18;
assign main_sdram_interface_bank2_we = builder_rhs_array_muxed19;
assign main_sdram_interface_bank2_valid = builder_rhs_array_muxed20;
assign builder_simsoc_roundrobin3_request = {(((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_simsoc_locked3 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_simsoc_roundrobin3_ce = ((~main_sdram_interface_bank3_valid) & (~main_sdram_interface_bank3_lock));
assign main_sdram_interface_bank3_addr = builder_rhs_array_muxed21;
assign main_sdram_interface_bank3_we = builder_rhs_array_muxed22;
assign main_sdram_interface_bank3_valid = builder_rhs_array_muxed23;
assign main_port_cmd_ready = ((((1'd0 | (((builder_simsoc_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_simsoc_locked0 | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank0_ready)) | (((builder_simsoc_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_simsoc_locked1 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank1_ready)) | (((builder_simsoc_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_simsoc_locked2 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank2_ready)) | (((builder_simsoc_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_simsoc_locked3 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0)))))) & main_sdram_interface_bank3_ready));
assign main_port_wdata_ready = builder_simsoc_new_master_wdata_ready;
assign main_port_rdata_valid = builder_simsoc_new_master_rdata_valid4;
always @(*) begin
	main_sdram_interface_wdata <= 32'd0;
	case ({builder_simsoc_new_master_wdata_ready})
		1'd1: begin
			main_sdram_interface_wdata <= main_port_wdata_payload_data;
		end
		default: begin
			main_sdram_interface_wdata <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_sdram_interface_wdata_we <= 4'd0;
	case ({builder_simsoc_new_master_wdata_ready})
		1'd1: begin
			main_sdram_interface_wdata_we <= main_port_wdata_payload_we;
		end
		default: begin
			main_sdram_interface_wdata_we <= 1'd0;
		end
	endcase
end
assign main_port_rdata_payload_data = main_sdram_interface_rdata;
assign builder_simsoc_roundrobin0_grant = 1'd0;
assign builder_simsoc_roundrobin1_grant = 1'd0;
assign builder_simsoc_roundrobin2_grant = 1'd0;
assign builder_simsoc_roundrobin3_grant = 1'd0;
assign main_data_port_adr = main_wb_sdram_adr[10:2];
always @(*) begin
	main_data_port_we <= 16'd0;
	if (main_write_from_slave) begin
		main_data_port_we <= {16{1'd1}};
	end else begin
		if ((((main_wb_sdram_cyc & main_wb_sdram_stb) & main_wb_sdram_we) & main_wb_sdram_ack)) begin
			main_data_port_we <= {({4{(main_wb_sdram_adr[1:0] == 2'd3)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 2'd2)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd1)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd0)}} & main_wb_sdram_sel)};
		end
	end
end
always @(*) begin
	main_data_port_dat_w <= 128'd0;
	if (main_write_from_slave) begin
		main_data_port_dat_w <= main_interface_dat_r;
	end else begin
		main_data_port_dat_w <= {4{main_wb_sdram_dat_w}};
	end
end
assign main_interface_dat_w = main_data_port_dat_r;
assign main_interface_sel = 16'd65535;
always @(*) begin
	main_wb_sdram_dat_r <= 32'd0;
	case (main_adr_offset_r)
		1'd0: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[31:0];
		end
		1'd1: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[63:32];
		end
		2'd2: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[95:64];
		end
		default: begin
			main_wb_sdram_dat_r <= main_data_port_dat_r[127:96];
		end
	endcase
end
assign {main_tag_do_dirty, main_tag_do_tag} = main_tag_port_dat_r;
assign {main_tag_do_dirty, main_tag_do_tag} = main_tag_port_dat_r;
assign main_tag_port_dat_w = {main_tag_di_dirty, main_tag_di_tag};
assign main_tag_port_adr = main_wb_sdram_adr[10:2];
assign main_tag_di_tag = main_wb_sdram_adr[29:11];
assign main_interface_adr = {main_tag_do_tag, main_wb_sdram_adr[10:2]};
always @(*) begin
	builder_simsoc_fullmemorywe_next_state <= 2'd0;
	builder_simsoc_fullmemorywe_next_state <= builder_simsoc_fullmemorywe_state;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
			if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
				builder_simsoc_fullmemorywe_next_state <= 1'd0;
			end else begin
				if (main_tag_do_dirty) begin
					builder_simsoc_fullmemorywe_next_state <= 2'd2;
				end else begin
					builder_simsoc_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			if (main_interface_ack) begin
				if (1'd1) begin
					builder_simsoc_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (main_interface_ack) begin
				if (1'd1) begin
					builder_simsoc_fullmemorywe_next_state <= 1'd1;
				end else begin
					builder_simsoc_fullmemorywe_next_state <= 2'd3;
				end
			end
		end
		default: begin
			if ((main_wb_sdram_cyc & main_wb_sdram_stb)) begin
				builder_simsoc_fullmemorywe_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_wb_sdram_ack <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
			if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
				main_wb_sdram_ack <= 1'd1;
			end else begin
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_tag_di_dirty <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
			if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
				if (main_wb_sdram_we) begin
					main_tag_di_dirty <= 1'd1;
				end
			end else begin
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_word_clr <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
			main_word_clr <= 1'd1;
			if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
			end else begin
				if (main_tag_do_dirty) begin
				end else begin
					main_word_clr <= 1'd1;
				end
			end
		end
		2'd2: begin
			if (main_interface_ack) begin
				if (1'd1) begin
					main_word_clr <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_word_inc <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_interface_ack) begin
				main_word_inc <= 1'd1;
			end
		end
		2'd3: begin
			if (main_interface_ack) begin
				main_word_inc <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface_we <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
		end
		2'd2: begin
			main_interface_we <= 1'd1;
		end
		2'd3: begin
			main_interface_we <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_write_from_slave <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_interface_ack) begin
				main_write_from_slave <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface_cyc <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
		end
		2'd2: begin
			main_interface_cyc <= 1'd1;
		end
		2'd3: begin
			main_interface_cyc <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface_stb <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
		end
		2'd2: begin
			main_interface_stb <= 1'd1;
		end
		2'd3: begin
			main_interface_stb <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_tag_port_we <= 1'd0;
	case (builder_simsoc_fullmemorywe_state)
		1'd1: begin
			if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
				if (main_wb_sdram_we) begin
					main_tag_port_we <= 1'd1;
				end
			end else begin
				if (main_tag_do_dirty) begin
				end else begin
					main_tag_port_we <= 1'd1;
				end
			end
		end
		2'd2: begin
			if (main_interface_ack) begin
				if (1'd1) begin
					main_tag_port_we <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
assign main_wishbone_bridge_cmd_payload_addr = (main_interface_adr - 27'd67108864);
assign main_wishbone_bridge_cmd_payload_we = main_interface_we;
assign main_wishbone_bridge_cmd_last = (~main_interface_we);
assign main_wishbone_bridge_flush = (~main_interface_cyc);
always @(*) begin
	main_wishbone_bridge_wdata_valid <= 1'd0;
	main_wishbone_bridge_wdata_valid <= (main_interface_stb & main_interface_we);
	if (1'd0) begin
		if ((~main_wishbone_bridge_is_ongoing)) begin
			main_wishbone_bridge_wdata_valid <= 1'd0;
		end
	end
end
assign main_wishbone_bridge_wdata_payload_data = main_interface_dat_w;
assign main_wishbone_bridge_wdata_payload_we = main_interface_sel;
assign main_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
	builder_simsoc_litedramnativeportconverter_next_state <= 1'd0;
	builder_simsoc_litedramnativeportconverter_next_state <= builder_simsoc_litedramnativeportconverter_state;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			if (main_port_cmd_ready) begin
				if ((main_wishbone_bridge_count == 2'd3)) begin
					builder_simsoc_litedramnativeportconverter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			if (main_wishbone_bridge_cmd_valid) begin
				builder_simsoc_litedramnativeportconverter_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_cmd_ready <= 1'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			if (main_port_cmd_ready) begin
				if ((main_wishbone_bridge_count == 2'd3)) begin
					main_wishbone_bridge_cmd_ready <= 1'd1;
				end
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_count_litedramnativeportconverter_next_value <= 2'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			if (main_port_cmd_ready) begin
				main_wishbone_bridge_count_litedramnativeportconverter_next_value <= (main_wishbone_bridge_count + 1'd1);
			end
		end
		default: begin
			main_wishbone_bridge_count_litedramnativeportconverter_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			if (main_port_cmd_ready) begin
				main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd1;
			end
		end
		default: begin
			main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_port_cmd_valid <= 1'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			main_port_cmd_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_port_cmd_payload_we <= 1'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			main_port_cmd_payload_we <= main_wishbone_bridge_cmd_payload_we;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_port_cmd_payload_addr <= 24'd0;
	case (builder_simsoc_litedramnativeportconverter_state)
		1'd1: begin
			main_port_cmd_payload_addr <= ((main_wishbone_bridge_cmd_payload_addr * 3'd4) + main_wishbone_bridge_count);
		end
		default: begin
		end
	endcase
end
assign main_wishbone_bridge_wdata_converter_converter_sink_valid = main_wishbone_bridge_wdata_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_sink_first = main_wishbone_bridge_wdata_converter_sink_first;
assign main_wishbone_bridge_wdata_converter_converter_sink_last = main_wishbone_bridge_wdata_converter_sink_last;
assign main_wishbone_bridge_wdata_converter_sink_ready = main_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[31:0] <= main_wishbone_bridge_wdata_converter_sink_payload_data[31:0];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:32] <= main_wishbone_bridge_wdata_converter_sink_payload_we[3:0];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[67:36] <= main_wishbone_bridge_wdata_converter_sink_payload_data[63:32];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:68] <= main_wishbone_bridge_wdata_converter_sink_payload_we[7:4];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[103:72] <= main_wishbone_bridge_wdata_converter_sink_payload_data[95:64];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:104] <= main_wishbone_bridge_wdata_converter_sink_payload_we[11:8];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[139:108] <= main_wishbone_bridge_wdata_converter_sink_payload_data[127:96];
	main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:140] <= main_wishbone_bridge_wdata_converter_sink_payload_we[15:12];
end
assign main_wishbone_bridge_wdata_converter_source_valid = main_wishbone_bridge_wdata_converter_source_source_valid;
assign main_wishbone_bridge_wdata_converter_source_first = main_wishbone_bridge_wdata_converter_source_source_first;
assign main_wishbone_bridge_wdata_converter_source_last = main_wishbone_bridge_wdata_converter_source_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_ready = main_wishbone_bridge_wdata_converter_source_ready;
assign {main_wishbone_bridge_wdata_converter_source_payload_we, main_wishbone_bridge_wdata_converter_source_payload_data} = main_wishbone_bridge_wdata_converter_source_source_payload_data;
assign {main_wishbone_bridge_wdata_converter_source_payload_we, main_wishbone_bridge_wdata_converter_source_payload_data} = main_wishbone_bridge_wdata_converter_source_source_payload_data;
assign main_wishbone_bridge_wdata_converter_source_source_valid = main_wishbone_bridge_wdata_converter_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_ready = main_wishbone_bridge_wdata_converter_source_source_ready;
assign main_wishbone_bridge_wdata_converter_source_source_first = main_wishbone_bridge_wdata_converter_converter_source_first;
assign main_wishbone_bridge_wdata_converter_source_source_last = main_wishbone_bridge_wdata_converter_converter_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_payload_data = main_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_wdata_converter_converter_first = (main_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign main_wishbone_bridge_wdata_converter_converter_last = (main_wishbone_bridge_wdata_converter_converter_mux == 2'd3);
assign main_wishbone_bridge_wdata_converter_converter_source_valid = main_wishbone_bridge_wdata_converter_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_first = (main_wishbone_bridge_wdata_converter_converter_sink_first & main_wishbone_bridge_wdata_converter_converter_first);
assign main_wishbone_bridge_wdata_converter_converter_source_last = (main_wishbone_bridge_wdata_converter_converter_sink_last & main_wishbone_bridge_wdata_converter_converter_last);
assign main_wishbone_bridge_wdata_converter_converter_sink_ready = (main_wishbone_bridge_wdata_converter_converter_last & main_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
	main_wishbone_bridge_wdata_converter_converter_source_payload_data <= 36'd0;
	case (main_wishbone_bridge_wdata_converter_converter_mux)
		1'd0: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:0];
		end
		1'd1: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:36];
		end
		2'd2: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:72];
		end
		default: begin
			main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:108];
		end
	endcase
end
assign main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = main_wishbone_bridge_wdata_converter_converter_last;
assign main_wishbone_bridge_wdata_converter_sink_valid = main_wishbone_bridge_wdata_valid;
assign main_wishbone_bridge_wdata_ready = main_wishbone_bridge_wdata_converter_sink_ready;
assign main_wishbone_bridge_wdata_converter_sink_first = main_wishbone_bridge_wdata_first;
assign main_wishbone_bridge_wdata_converter_sink_last = main_wishbone_bridge_wdata_last;
assign main_wishbone_bridge_wdata_converter_sink_payload_data = main_wishbone_bridge_wdata_payload_data;
assign main_wishbone_bridge_wdata_converter_sink_payload_we = main_wishbone_bridge_wdata_payload_we;
assign main_port_wdata_valid = main_wishbone_bridge_wdata_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_wishbone_bridge_wdata_converter_source_first;
assign main_port_wdata_last = main_wishbone_bridge_wdata_converter_source_last;
assign main_port_wdata_payload_data = main_wishbone_bridge_wdata_converter_source_payload_data;
assign main_port_wdata_payload_we = main_wishbone_bridge_wdata_converter_source_payload_we;
assign main_wishbone_bridge_rdata_converter_converter_sink_valid = main_wishbone_bridge_rdata_converter_sink_valid;
assign main_wishbone_bridge_rdata_converter_converter_sink_first = main_wishbone_bridge_rdata_converter_sink_first;
assign main_wishbone_bridge_rdata_converter_converter_sink_last = main_wishbone_bridge_rdata_converter_sink_last;
assign main_wishbone_bridge_rdata_converter_sink_ready = main_wishbone_bridge_rdata_converter_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_converter_sink_payload_data = {main_wishbone_bridge_rdata_converter_sink_payload_data};
assign main_wishbone_bridge_rdata_converter_source_valid = main_wishbone_bridge_rdata_converter_source_source_valid;
assign main_wishbone_bridge_rdata_converter_source_first = main_wishbone_bridge_rdata_converter_source_source_first;
assign main_wishbone_bridge_rdata_converter_source_last = main_wishbone_bridge_rdata_converter_source_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_ready = main_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
	main_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
	main_wishbone_bridge_rdata_converter_source_payload_data[31:0] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[31:0];
	main_wishbone_bridge_rdata_converter_source_payload_data[63:32] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[63:32];
	main_wishbone_bridge_rdata_converter_source_payload_data[95:64] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[95:64];
	main_wishbone_bridge_rdata_converter_source_payload_data[127:96] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[127:96];
end
assign main_wishbone_bridge_rdata_converter_source_source_valid = main_wishbone_bridge_rdata_converter_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_converter_source_ready = main_wishbone_bridge_rdata_converter_source_source_ready;
assign main_wishbone_bridge_rdata_converter_source_source_first = main_wishbone_bridge_rdata_converter_converter_source_first;
assign main_wishbone_bridge_rdata_converter_source_source_last = main_wishbone_bridge_rdata_converter_converter_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_payload_data = main_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_rdata_converter_converter_sink_ready = ((~main_wishbone_bridge_rdata_converter_converter_strobe_all) | main_wishbone_bridge_rdata_converter_converter_source_ready);
assign main_wishbone_bridge_rdata_converter_converter_source_valid = main_wishbone_bridge_rdata_converter_converter_strobe_all;
assign main_wishbone_bridge_rdata_converter_converter_load_part = (main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready);
assign main_wishbone_bridge_rdata_converter_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_wishbone_bridge_rdata_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_sink_first = main_port_rdata_first;
assign main_wishbone_bridge_rdata_converter_sink_last = main_port_rdata_last;
assign main_wishbone_bridge_rdata_converter_sink_payload_data = main_port_rdata_payload_data;
assign main_wishbone_bridge_rdata_valid = main_wishbone_bridge_rdata_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_source_ready = main_wishbone_bridge_rdata_ready;
assign main_wishbone_bridge_rdata_first = main_wishbone_bridge_rdata_converter_source_first;
assign main_wishbone_bridge_rdata_last = main_wishbone_bridge_rdata_converter_source_last;
assign main_wishbone_bridge_rdata_payload_data = main_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
	builder_simsoc_fsm_next_state <= 2'd0;
	builder_simsoc_fsm_next_state <= builder_simsoc_fsm_state;
	case (builder_simsoc_fsm_state)
		1'd1: begin
			if ((main_wishbone_bridge_wdata_valid & main_wishbone_bridge_wdata_ready)) begin
				builder_simsoc_fsm_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (main_wishbone_bridge_rdata_valid) begin
				builder_simsoc_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & main_interface_we)) begin
				builder_simsoc_fsm_next_state <= 1'd1;
			end
			if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & (~main_interface_we))) begin
				builder_simsoc_fsm_next_state <= 2'd2;
			end
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_is_ongoing <= 1'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
			main_wishbone_bridge_is_ongoing <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_cmd_valid <= 1'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			main_wishbone_bridge_cmd_valid <= (main_interface_cyc & main_interface_stb);
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
			main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
		end
		2'd2: begin
			main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
		end
		default: begin
			main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
			main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
		end
		2'd2: begin
			main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
		end
		default: begin
			main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_interface_dat_r <= 128'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
		end
		2'd2: begin
			if (main_wishbone_bridge_rdata_valid) begin
				main_interface_dat_r <= main_wishbone_bridge_rdata_payload_data;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface_ack <= 1'd0;
	case (builder_simsoc_fsm_state)
		1'd1: begin
			if ((main_wishbone_bridge_wdata_valid & main_wishbone_bridge_wdata_ready)) begin
				main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
			end
		end
		2'd2: begin
			if (main_wishbone_bridge_rdata_valid) begin
				main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_wishbone2csr_next_state <= 2'd0;
	builder_simsoc_wishbone2csr_next_state <= builder_simsoc_wishbone2csr_state;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
			builder_simsoc_wishbone2csr_next_state <= 2'd2;
		end
		2'd2: begin
			builder_simsoc_wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_wishbone_dat_r <= 32'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
		end
		2'd2: begin
			builder_simsoc_wishbone_dat_r <= builder_simsoc_dat_r;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_dat_w_next_value0 <= 32'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			builder_simsoc_dat_w_next_value0 <= builder_simsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	builder_simsoc_dat_w_next_value_ce0 <= 1'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			builder_simsoc_dat_w_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	builder_simsoc_wishbone_ack <= 1'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
		end
		2'd2: begin
			builder_simsoc_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_adr_next_value1 <= 14'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
			builder_simsoc_adr_next_value1 <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_adr_next_value1 <= builder_simsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_adr_next_value_ce1 <= 1'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
			builder_simsoc_adr_next_value_ce1 <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_adr_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_we_next_value2 <= 1'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
			builder_simsoc_we_next_value2 <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_we_next_value2 <= (builder_simsoc_wishbone_we & (builder_simsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_we_next_value_ce2 <= 1'd0;
	case (builder_simsoc_wishbone2csr_state)
		1'd1: begin
			builder_simsoc_we_next_value_ce2 <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_we_next_value_ce2 <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_rhs_array_muxed24;
assign builder_shared_dat_w = builder_rhs_array_muxed25;
assign builder_shared_sel = builder_rhs_array_muxed26;
assign builder_shared_cyc = builder_rhs_array_muxed27;
assign builder_shared_stb = builder_rhs_array_muxed28;
assign builder_shared_we = builder_rhs_array_muxed29;
assign builder_shared_cti = builder_rhs_array_muxed30;
assign builder_shared_bte = builder_rhs_array_muxed31;
assign main_ibus_dat_r = builder_shared_dat_r;
assign main_dbus_dat_r = builder_shared_dat_r;
assign main_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_dbus_cyc, main_ibus_cyc};
always @(*) begin
	builder_slave_sel <= 4'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
	builder_slave_sel[1] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[2] <= (builder_shared_adr[29:24] == 5'd16);
	builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_simsoc_ram_bus_adr = builder_shared_adr;
assign main_simsoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_simsoc_ram_bus_sel = builder_shared_sel;
assign main_simsoc_ram_bus_stb = builder_shared_stb;
assign main_simsoc_ram_bus_we = builder_shared_we;
assign main_simsoc_ram_bus_cti = builder_shared_cti;
assign main_simsoc_ram_bus_bte = builder_shared_bte;
assign main_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_ram_bus_ram_bus_we = builder_shared_we;
assign main_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_ram_bus_ram_bus_bte = builder_shared_bte;
assign main_wb_sdram_adr = builder_shared_adr;
assign main_wb_sdram_dat_w = builder_shared_dat_w;
assign main_wb_sdram_sel = builder_shared_sel;
assign main_wb_sdram_stb = builder_shared_stb;
assign main_wb_sdram_we = builder_shared_we;
assign main_wb_sdram_cti = builder_shared_cti;
assign main_wb_sdram_bte = builder_shared_bte;
assign builder_simsoc_wishbone_adr = builder_shared_adr;
assign builder_simsoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_simsoc_wishbone_sel = builder_shared_sel;
assign builder_simsoc_wishbone_stb = builder_shared_stb;
assign builder_simsoc_wishbone_we = builder_shared_we;
assign builder_simsoc_wishbone_cti = builder_shared_cti;
assign builder_simsoc_wishbone_bte = builder_shared_bte;
assign main_simsoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_wb_sdram_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_simsoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
always @(*) begin
	builder_shared_ack <= 1'd0;
	builder_shared_ack <= (((main_simsoc_ram_bus_ack | main_ram_bus_ram_bus_ack) | main_wb_sdram_ack) | builder_simsoc_wishbone_ack);
	if (builder_done) begin
		builder_shared_ack <= 1'd1;
	end
end
assign builder_shared_err = (((main_simsoc_ram_bus_err | main_ram_bus_ram_bus_err) | main_wb_sdram_err) | builder_simsoc_wishbone_err);
always @(*) begin
	builder_shared_dat_r <= 32'd0;
	builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_simsoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_wb_sdram_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_simsoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
	end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_error <= 1'd0;
	if (builder_done) begin
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	main_soc_rst <= 1'd0;
	if (main_reset_re) begin
		main_soc_rst <= main_reset_storage[0];
	end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_dfii_control0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_control0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_dfii_control0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_control0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_dfii_control0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_dfii_pi0_command0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[5:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_command0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_command0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_command0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_command0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign main_sdram_command_issue_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	main_sdram_command_issue_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		main_sdram_command_issue_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	main_sdram_command_issue_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		main_sdram_command_issue_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_dfii_pi0_address0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[12:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_address0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_address0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_address0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_address0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_dfii_pi0_rddata_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_rddata_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_rddata_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_dfii_pi0_rddata_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_dfii_pi0_rddata_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign main_sdram_sel = main_sdram_storage[0];
assign main_sdram_cke = main_sdram_storage[1];
assign main_sdram_odt = main_sdram_storage[2];
assign main_sdram_reset_n = main_sdram_storage[3];
assign builder_csr_bankarray_csrbank1_dfii_control0_w = main_sdram_storage[3:0];
assign main_sdram_csrfield_cs = main_sdram_command_storage[0];
assign main_sdram_csrfield_we = main_sdram_command_storage[1];
assign main_sdram_csrfield_cas = main_sdram_command_storage[2];
assign main_sdram_csrfield_ras = main_sdram_command_storage[3];
assign main_sdram_csrfield_wren = main_sdram_command_storage[4];
assign main_sdram_csrfield_rden = main_sdram_command_storage[5];
assign builder_csr_bankarray_csrbank1_dfii_pi0_command0_w = main_sdram_command_storage[5:0];
assign builder_csr_bankarray_csrbank1_dfii_pi0_address0_w = main_sdram_address_storage[12:0];
assign builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_w = main_sdram_baddress_storage[1:0];
assign builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_w = main_sdram_wrdata_storage[31:0];
assign builder_csr_bankarray_csrbank1_dfii_pi0_rddata_w = main_sdram_rddata_status[31:0];
assign main_sdram_rddata_we = builder_csr_bankarray_csrbank1_dfii_pi0_rddata_we;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_load0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_load0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank2_load0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank2_load0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_reload0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_reload0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_reload0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_reload0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_en0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_en0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_en0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_en0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_en0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_update_value0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_update_value0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_update_value0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_update_value0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_update_value0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_value_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_value_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_value_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_value_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_load0_w = main_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank2_reload0_w = main_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank2_en0_w = main_timer_en_storage;
assign builder_csr_bankarray_csrbank2_update_value0_w = main_timer_update_value_storage;
assign builder_csr_bankarray_csrbank2_value_w = main_timer_value_status[31:0];
assign main_timer_value_we = builder_csr_bankarray_csrbank2_value_we;
assign main_timer_status_status = main_timer_zero0;
assign builder_csr_bankarray_csrbank2_ev_status_w = main_timer_status_status;
assign main_timer_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
assign main_timer_pending_status = main_timer_zero1;
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_timer_pending_status;
assign main_timer_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_timer_zero2 = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign main_uart_rxtx_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
	main_uart_rxtx_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	main_uart_rxtx_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank3_txfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank3_txfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_txfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank3_txfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_rxempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank3_rxempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank3_rxempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank3_ev_status_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank3_ev_pending_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank3_ev_enable0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank3_txempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_txempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank3_txempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank3_rxfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank3_rxfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank3_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank3_rxfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank3_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csr_bankarray_csrbank3_txfull_we;
assign builder_csr_bankarray_csrbank3_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
	main_uart_status_status <= 2'd0;
	main_uart_status_status[0] <= main_uart_tx0;
	main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csr_bankarray_csrbank3_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
	main_uart_pending_status <= 2'd0;
	main_uart_pending_status[0] <= main_uart_tx1;
	main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank3_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csr_bankarray_csrbank3_txempty_we;
assign builder_csr_bankarray_csrbank3_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csr_bankarray_csrbank3_rxfull_we;
assign builder_csr_interconnect_adr = builder_simsoc_adr;
assign builder_csr_interconnect_we = builder_simsoc_we;
assign builder_csr_interconnect_dat_w = builder_simsoc_dat_w;
assign builder_simsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign builder_slice_proxy0 = ((main_bankmodel0_row * 10'd512) | main_bankmodel0_write_col);
assign builder_slice_proxy1 = ((main_bankmodel0_row * 10'd512) | main_bankmodel0_read_col);
assign builder_slice_proxy2 = ((main_bankmodel1_row * 10'd512) | main_bankmodel1_write_col);
assign builder_slice_proxy3 = ((main_bankmodel1_row * 10'd512) | main_bankmodel1_read_col);
assign builder_slice_proxy4 = ((main_bankmodel2_row * 10'd512) | main_bankmodel2_write_col);
assign builder_slice_proxy5 = ((main_bankmodel2_row * 10'd512) | main_bankmodel2_read_col);
assign builder_slice_proxy6 = ((main_bankmodel3_row * 10'd512) | main_bankmodel3_write_col);
assign builder_slice_proxy7 = ((main_bankmodel3_row * 10'd512) | main_bankmodel3_read_col);
always @(*) begin
	builder_rhs_array_muxed0 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[0];
		end
		1'd1: begin
			builder_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[1];
		end
		2'd2: begin
			builder_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[2];
		end
		default: begin
			builder_rhs_array_muxed0 <= main_sdram_choose_cmd_valids[3];
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed1 <= 13'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed1 <= main_sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			builder_rhs_array_muxed1 <= main_sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			builder_rhs_array_muxed1 <= main_sdram_bankmachine2_cmd_payload_a;
		end
		default: begin
			builder_rhs_array_muxed1 <= main_sdram_bankmachine3_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed2 <= 2'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed2 <= main_sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			builder_rhs_array_muxed2 <= main_sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			builder_rhs_array_muxed2 <= main_sdram_bankmachine2_cmd_payload_ba;
		end
		default: begin
			builder_rhs_array_muxed2 <= main_sdram_bankmachine3_cmd_payload_ba;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed3 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed3 <= main_sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			builder_rhs_array_muxed3 <= main_sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			builder_rhs_array_muxed3 <= main_sdram_bankmachine2_cmd_payload_is_read;
		end
		default: begin
			builder_rhs_array_muxed3 <= main_sdram_bankmachine3_cmd_payload_is_read;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed4 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed4 <= main_sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			builder_rhs_array_muxed4 <= main_sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			builder_rhs_array_muxed4 <= main_sdram_bankmachine2_cmd_payload_is_write;
		end
		default: begin
			builder_rhs_array_muxed4 <= main_sdram_bankmachine3_cmd_payload_is_write;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed5 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_rhs_array_muxed5 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			builder_rhs_array_muxed5 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			builder_rhs_array_muxed5 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
		end
		default: begin
			builder_rhs_array_muxed5 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed0 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_t_array_muxed0 <= main_sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			builder_t_array_muxed0 <= main_sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			builder_t_array_muxed0 <= main_sdram_bankmachine2_cmd_payload_cas;
		end
		default: begin
			builder_t_array_muxed0 <= main_sdram_bankmachine3_cmd_payload_cas;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed1 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_t_array_muxed1 <= main_sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			builder_t_array_muxed1 <= main_sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			builder_t_array_muxed1 <= main_sdram_bankmachine2_cmd_payload_ras;
		end
		default: begin
			builder_t_array_muxed1 <= main_sdram_bankmachine3_cmd_payload_ras;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed2 <= 1'd0;
	case (main_sdram_choose_cmd_grant)
		1'd0: begin
			builder_t_array_muxed2 <= main_sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			builder_t_array_muxed2 <= main_sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			builder_t_array_muxed2 <= main_sdram_bankmachine2_cmd_payload_we;
		end
		default: begin
			builder_t_array_muxed2 <= main_sdram_bankmachine3_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed6 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed6 <= main_sdram_choose_req_valids[0];
		end
		1'd1: begin
			builder_rhs_array_muxed6 <= main_sdram_choose_req_valids[1];
		end
		2'd2: begin
			builder_rhs_array_muxed6 <= main_sdram_choose_req_valids[2];
		end
		default: begin
			builder_rhs_array_muxed6 <= main_sdram_choose_req_valids[3];
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed7 <= 13'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed7 <= main_sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			builder_rhs_array_muxed7 <= main_sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			builder_rhs_array_muxed7 <= main_sdram_bankmachine2_cmd_payload_a;
		end
		default: begin
			builder_rhs_array_muxed7 <= main_sdram_bankmachine3_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed8 <= 2'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed8 <= main_sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			builder_rhs_array_muxed8 <= main_sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			builder_rhs_array_muxed8 <= main_sdram_bankmachine2_cmd_payload_ba;
		end
		default: begin
			builder_rhs_array_muxed8 <= main_sdram_bankmachine3_cmd_payload_ba;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed9 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed9 <= main_sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			builder_rhs_array_muxed9 <= main_sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			builder_rhs_array_muxed9 <= main_sdram_bankmachine2_cmd_payload_is_read;
		end
		default: begin
			builder_rhs_array_muxed9 <= main_sdram_bankmachine3_cmd_payload_is_read;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed10 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed10 <= main_sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			builder_rhs_array_muxed10 <= main_sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			builder_rhs_array_muxed10 <= main_sdram_bankmachine2_cmd_payload_is_write;
		end
		default: begin
			builder_rhs_array_muxed10 <= main_sdram_bankmachine3_cmd_payload_is_write;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed11 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_rhs_array_muxed11 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			builder_rhs_array_muxed11 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			builder_rhs_array_muxed11 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
		end
		default: begin
			builder_rhs_array_muxed11 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed3 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_t_array_muxed3 <= main_sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			builder_t_array_muxed3 <= main_sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			builder_t_array_muxed3 <= main_sdram_bankmachine2_cmd_payload_cas;
		end
		default: begin
			builder_t_array_muxed3 <= main_sdram_bankmachine3_cmd_payload_cas;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed4 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_t_array_muxed4 <= main_sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			builder_t_array_muxed4 <= main_sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			builder_t_array_muxed4 <= main_sdram_bankmachine2_cmd_payload_ras;
		end
		default: begin
			builder_t_array_muxed4 <= main_sdram_bankmachine3_cmd_payload_ras;
		end
	endcase
end
always @(*) begin
	builder_t_array_muxed5 <= 1'd0;
	case (main_sdram_choose_req_grant)
		1'd0: begin
			builder_t_array_muxed5 <= main_sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			builder_t_array_muxed5 <= main_sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			builder_t_array_muxed5 <= main_sdram_bankmachine2_cmd_payload_we;
		end
		default: begin
			builder_t_array_muxed5 <= main_sdram_bankmachine3_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed12 <= 22'd0;
	case (builder_simsoc_roundrobin0_grant)
		default: begin
			builder_rhs_array_muxed12 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed13 <= 1'd0;
	case (builder_simsoc_roundrobin0_grant)
		default: begin
			builder_rhs_array_muxed13 <= main_port_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed14 <= 1'd0;
	case (builder_simsoc_roundrobin0_grant)
		default: begin
			builder_rhs_array_muxed14 <= (((main_port_cmd_payload_addr[10:9] == 1'd0) & (~(((builder_simsoc_locked0 | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed15 <= 22'd0;
	case (builder_simsoc_roundrobin1_grant)
		default: begin
			builder_rhs_array_muxed15 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed16 <= 1'd0;
	case (builder_simsoc_roundrobin1_grant)
		default: begin
			builder_rhs_array_muxed16 <= main_port_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed17 <= 1'd0;
	case (builder_simsoc_roundrobin1_grant)
		default: begin
			builder_rhs_array_muxed17 <= (((main_port_cmd_payload_addr[10:9] == 1'd1) & (~(((builder_simsoc_locked1 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed18 <= 22'd0;
	case (builder_simsoc_roundrobin2_grant)
		default: begin
			builder_rhs_array_muxed18 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed19 <= 1'd0;
	case (builder_simsoc_roundrobin2_grant)
		default: begin
			builder_rhs_array_muxed19 <= main_port_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed20 <= 1'd0;
	case (builder_simsoc_roundrobin2_grant)
		default: begin
			builder_rhs_array_muxed20 <= (((main_port_cmd_payload_addr[10:9] == 2'd2) & (~(((builder_simsoc_locked2 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_simsoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed21 <= 22'd0;
	case (builder_simsoc_roundrobin3_grant)
		default: begin
			builder_rhs_array_muxed21 <= {main_port_cmd_payload_addr[23:11], main_port_cmd_payload_addr[8:0]};
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed22 <= 1'd0;
	case (builder_simsoc_roundrobin3_grant)
		default: begin
			builder_rhs_array_muxed22 <= main_port_cmd_payload_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed23 <= 1'd0;
	case (builder_simsoc_roundrobin3_grant)
		default: begin
			builder_rhs_array_muxed23 <= (((main_port_cmd_payload_addr[10:9] == 2'd3) & (~(((builder_simsoc_locked3 | (main_sdram_interface_bank0_lock & (builder_simsoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_simsoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_simsoc_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid);
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed24 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed24 <= main_ibus_adr;
		end
		default: begin
			builder_rhs_array_muxed24 <= main_dbus_adr;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed25 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed25 <= main_ibus_dat_w;
		end
		default: begin
			builder_rhs_array_muxed25 <= main_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed26 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed26 <= main_ibus_sel;
		end
		default: begin
			builder_rhs_array_muxed26 <= main_dbus_sel;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed27 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed27 <= main_ibus_cyc;
		end
		default: begin
			builder_rhs_array_muxed27 <= main_dbus_cyc;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed28 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed28 <= main_ibus_stb;
		end
		default: begin
			builder_rhs_array_muxed28 <= main_dbus_stb;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed29 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed29 <= main_ibus_we;
		end
		default: begin
			builder_rhs_array_muxed29 <= main_dbus_we;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed30 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed30 <= main_ibus_cti;
		end
		default: begin
			builder_rhs_array_muxed30 <= main_dbus_cti;
		end
	endcase
end
always @(*) begin
	builder_rhs_array_muxed31 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_rhs_array_muxed31 <= main_ibus_bte;
		end
		default: begin
			builder_rhs_array_muxed31 <= main_dbus_bte;
		end
	endcase
end
always @(*) begin
	builder_array_muxed0 <= 2'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed0 <= main_sdram_nop_ba[1:0];
		end
		1'd1: begin
			builder_array_muxed0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
		end
		2'd2: begin
			builder_array_muxed0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
		end
		default: begin
			builder_array_muxed0 <= main_sdram_cmd_payload_ba[1:0];
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 13'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed1 <= main_sdram_nop_a;
		end
		1'd1: begin
			builder_array_muxed1 <= main_sdram_choose_req_cmd_payload_a;
		end
		2'd2: begin
			builder_array_muxed1 <= main_sdram_choose_req_cmd_payload_a;
		end
		default: begin
			builder_array_muxed1 <= main_sdram_cmd_payload_a;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed2 <= 1'd0;
		end
		1'd1: begin
			builder_array_muxed2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
		end
		2'd2: begin
			builder_array_muxed2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
		end
		default: begin
			builder_array_muxed2 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed3 <= 1'd0;
		end
		1'd1: begin
			builder_array_muxed3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
		end
		2'd2: begin
			builder_array_muxed3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
		end
		default: begin
			builder_array_muxed3 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed4 <= 1'd0;
		end
		1'd1: begin
			builder_array_muxed4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
		end
		2'd2: begin
			builder_array_muxed4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
		end
		default: begin
			builder_array_muxed4 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed5 <= 1'd0;
		end
		1'd1: begin
			builder_array_muxed5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
		end
		2'd2: begin
			builder_array_muxed5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
		end
		default: begin
			builder_array_muxed5 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 1'd0;
	case (main_sdram_steerer_sel)
		1'd0: begin
			builder_array_muxed6 <= 1'd0;
		end
		1'd1: begin
			builder_array_muxed6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
		end
		2'd2: begin
			builder_array_muxed6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
		end
		default: begin
			builder_array_muxed6 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
		end
	endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	main_int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
	if ((main_bus_errors != 32'd4294967295)) begin
		if (main_bus_error) begin
			main_bus_errors <= (main_bus_errors + 1'd1);
		end
	end
	main_simsoc_ram_bus_ack <= 1'd0;
	if (((main_simsoc_ram_bus_cyc & main_simsoc_ram_bus_stb) & ((~main_simsoc_ram_bus_ack) | main_simsoc_adr_burst))) begin
		main_simsoc_ram_bus_ack <= 1'd1;
	end
	main_ram_bus_ram_bus_ack <= 1'd0;
	if (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & ((~main_ram_bus_ram_bus_ack) | main_ram_adr_burst))) begin
		main_ram_bus_ram_bus_ack <= 1'd1;
	end
	if (main_uart_tx_clear) begin
		main_uart_tx_pending <= 1'd0;
	end
	main_uart_tx_trigger_d <= main_uart_tx_trigger;
	if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
		main_uart_tx_pending <= 1'd1;
	end
	if (main_uart_rx_clear) begin
		main_uart_rx_pending <= 1'd0;
	end
	main_uart_rx_trigger_d <= main_uart_rx_trigger;
	if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
		main_uart_rx_pending <= 1'd1;
	end
	if (main_uart_tx_fifo_syncfifo_re) begin
		main_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_tx_fifo_re) begin
			main_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
	end
	if (main_uart_tx_fifo_do_read) begin
		main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		if ((~main_uart_tx_fifo_do_read)) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_tx_fifo_do_read) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (main_uart_rx_fifo_syncfifo_re) begin
		main_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_rx_fifo_re) begin
			main_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
	end
	if (main_uart_rx_fifo_do_read) begin
		main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		if ((~main_uart_rx_fifo_do_read)) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_rx_fifo_do_read) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (main_timer_en_storage) begin
		if ((main_timer_value == 1'd0)) begin
			main_timer_value <= main_timer_reload_storage;
		end else begin
			main_timer_value <= (main_timer_value - 1'd1);
		end
	end else begin
		main_timer_value <= main_timer_load_storage;
	end
	if (main_timer_update_value_re) begin
		main_timer_value_status <= main_timer_value;
	end
	if (main_timer_zero_clear) begin
		main_timer_zero_pending <= 1'd0;
	end
	main_timer_zero_trigger_d <= main_timer_zero_trigger;
	if ((main_timer_zero_trigger & (~main_timer_zero_trigger_d))) begin
		main_timer_zero_pending <= 1'd1;
	end
	main_new_banks_read0 <= main_banks_read;
	main_new_banks_read_data0 <= main_banks_read_data;
	main_new_banks_read1 <= main_new_banks_read0;
	main_new_banks_read_data1 <= main_new_banks_read_data0;
	main_new_banks_read2 <= main_new_banks_read1;
	main_new_banks_read_data2 <= main_new_banks_read_data1;
	main_new_banks_read3 <= main_new_banks_read2;
	main_new_banks_read_data3 <= main_new_banks_read_data2;
	if (main_bankmodel0_precharge) begin
		main_bankmodel0_active <= 1'd0;
	end else begin
		if (main_bankmodel0_activate) begin
			main_bankmodel0_active <= 1'd1;
			main_bankmodel0_row <= main_bankmodel0_activate_row;
		end
	end
	if (main_bankmodel1_precharge) begin
		main_bankmodel1_active <= 1'd0;
	end else begin
		if (main_bankmodel1_activate) begin
			main_bankmodel1_active <= 1'd1;
			main_bankmodel1_row <= main_bankmodel1_activate_row;
		end
	end
	if (main_bankmodel2_precharge) begin
		main_bankmodel2_active <= 1'd0;
	end else begin
		if (main_bankmodel2_activate) begin
			main_bankmodel2_active <= 1'd1;
			main_bankmodel2_row <= main_bankmodel2_activate_row;
		end
	end
	if (main_bankmodel3_precharge) begin
		main_bankmodel3_active <= 1'd0;
	end else begin
		if (main_bankmodel3_activate) begin
			main_bankmodel3_active <= 1'd1;
			main_bankmodel3_row <= main_bankmodel3_activate_row;
		end
	end
	if (main_sdram_csr_dfi_p0_rddata_valid) begin
		main_sdram_rddata_status <= main_sdram_csr_dfi_p0_rddata;
	end
	if ((main_sdram_timer_wait & (~main_sdram_timer_done0))) begin
		main_sdram_timer_count1 <= (main_sdram_timer_count1 - 1'd1);
	end else begin
		main_sdram_timer_count1 <= 10'd781;
	end
	main_sdram_postponer_req_o <= 1'd0;
	if (main_sdram_postponer_req_i) begin
		main_sdram_postponer_count <= (main_sdram_postponer_count - 1'd1);
		if ((main_sdram_postponer_count == 1'd0)) begin
			main_sdram_postponer_count <= 1'd0;
			main_sdram_postponer_req_o <= 1'd1;
		end
	end
	if (main_sdram_sequencer_start0) begin
		main_sdram_sequencer_count <= 1'd0;
	end else begin
		if (main_sdram_sequencer_done1) begin
			if ((main_sdram_sequencer_count != 1'd0)) begin
				main_sdram_sequencer_count <= (main_sdram_sequencer_count - 1'd1);
			end
		end
	end
	main_sdram_cmd_payload_a <= 1'd0;
	main_sdram_cmd_payload_ba <= 1'd0;
	main_sdram_cmd_payload_cas <= 1'd0;
	main_sdram_cmd_payload_ras <= 1'd0;
	main_sdram_cmd_payload_we <= 1'd0;
	main_sdram_sequencer_done1 <= 1'd0;
	if ((main_sdram_sequencer_start1 & (main_sdram_sequencer_counter == 1'd0))) begin
		main_sdram_cmd_payload_a <= 11'd1024;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd1;
		main_sdram_cmd_payload_we <= 1'd1;
	end
	if ((main_sdram_sequencer_counter == 2'd2)) begin
		main_sdram_cmd_payload_a <= 11'd1024;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd1;
		main_sdram_cmd_payload_ras <= 1'd1;
		main_sdram_cmd_payload_we <= 1'd0;
	end
	if ((main_sdram_sequencer_counter == 4'd9)) begin
		main_sdram_cmd_payload_a <= 1'd0;
		main_sdram_cmd_payload_ba <= 1'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd0;
		main_sdram_cmd_payload_we <= 1'd0;
		main_sdram_sequencer_done1 <= 1'd1;
	end
	if ((main_sdram_sequencer_counter == 4'd9)) begin
		main_sdram_sequencer_counter <= 1'd0;
	end else begin
		if ((main_sdram_sequencer_counter != 1'd0)) begin
			main_sdram_sequencer_counter <= (main_sdram_sequencer_counter + 1'd1);
		end else begin
			if (main_sdram_sequencer_start1) begin
				main_sdram_sequencer_counter <= 1'd1;
			end
		end
	end
	builder_simsoc_refresher_state <= builder_simsoc_refresher_next_state;
	if (main_sdram_bankmachine0_row_close) begin
		main_sdram_bankmachine0_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine0_row_open) begin
			main_sdram_bankmachine0_row_opened <= 1'd1;
			main_sdram_bankmachine0_row <= main_sdram_bankmachine0_source_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
		main_sdram_bankmachine0_produce <= (main_sdram_bankmachine0_produce + 1'd1);
	end
	if (main_sdram_bankmachine0_do_read) begin
		main_sdram_bankmachine0_consume <= (main_sdram_bankmachine0_consume + 1'd1);
	end
	if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
		if ((~main_sdram_bankmachine0_do_read)) begin
			main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine0_do_read) begin
			main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready)) begin
		main_sdram_bankmachine0_pipe_valid_source_valid <= main_sdram_bankmachine0_pipe_valid_sink_valid;
		main_sdram_bankmachine0_pipe_valid_source_first <= main_sdram_bankmachine0_pipe_valid_sink_first;
		main_sdram_bankmachine0_pipe_valid_source_last <= main_sdram_bankmachine0_pipe_valid_sink_last;
		main_sdram_bankmachine0_pipe_valid_source_payload_we <= main_sdram_bankmachine0_pipe_valid_sink_payload_we;
		main_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
	end
	if (main_sdram_bankmachine0_twtpcon_valid) begin
		main_sdram_bankmachine0_twtpcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_twtpcon_ready)) begin
			main_sdram_bankmachine0_twtpcon_count <= (main_sdram_bankmachine0_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine0_trccon_valid) begin
		main_sdram_bankmachine0_trccon_count <= 3'd6;
		if (1'd0) begin
			main_sdram_bankmachine0_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_trccon_ready)) begin
			main_sdram_bankmachine0_trccon_count <= (main_sdram_bankmachine0_trccon_count - 1'd1);
			if ((main_sdram_bankmachine0_trccon_count == 1'd1)) begin
				main_sdram_bankmachine0_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine0_trascon_valid) begin
		main_sdram_bankmachine0_trascon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine0_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine0_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine0_trascon_ready)) begin
			main_sdram_bankmachine0_trascon_count <= (main_sdram_bankmachine0_trascon_count - 1'd1);
			if ((main_sdram_bankmachine0_trascon_count == 1'd1)) begin
				main_sdram_bankmachine0_trascon_ready <= 1'd1;
			end
		end
	end
	builder_simsoc_bankmachine0_state <= builder_simsoc_bankmachine0_next_state;
	if (main_sdram_bankmachine1_row_close) begin
		main_sdram_bankmachine1_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine1_row_open) begin
			main_sdram_bankmachine1_row_opened <= 1'd1;
			main_sdram_bankmachine1_row <= main_sdram_bankmachine1_source_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
		main_sdram_bankmachine1_produce <= (main_sdram_bankmachine1_produce + 1'd1);
	end
	if (main_sdram_bankmachine1_do_read) begin
		main_sdram_bankmachine1_consume <= (main_sdram_bankmachine1_consume + 1'd1);
	end
	if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
		if ((~main_sdram_bankmachine1_do_read)) begin
			main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine1_do_read) begin
			main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready)) begin
		main_sdram_bankmachine1_pipe_valid_source_valid <= main_sdram_bankmachine1_pipe_valid_sink_valid;
		main_sdram_bankmachine1_pipe_valid_source_first <= main_sdram_bankmachine1_pipe_valid_sink_first;
		main_sdram_bankmachine1_pipe_valid_source_last <= main_sdram_bankmachine1_pipe_valid_sink_last;
		main_sdram_bankmachine1_pipe_valid_source_payload_we <= main_sdram_bankmachine1_pipe_valid_sink_payload_we;
		main_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
	end
	if (main_sdram_bankmachine1_twtpcon_valid) begin
		main_sdram_bankmachine1_twtpcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_twtpcon_ready)) begin
			main_sdram_bankmachine1_twtpcon_count <= (main_sdram_bankmachine1_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine1_trccon_valid) begin
		main_sdram_bankmachine1_trccon_count <= 3'd6;
		if (1'd0) begin
			main_sdram_bankmachine1_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_trccon_ready)) begin
			main_sdram_bankmachine1_trccon_count <= (main_sdram_bankmachine1_trccon_count - 1'd1);
			if ((main_sdram_bankmachine1_trccon_count == 1'd1)) begin
				main_sdram_bankmachine1_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine1_trascon_valid) begin
		main_sdram_bankmachine1_trascon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine1_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine1_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine1_trascon_ready)) begin
			main_sdram_bankmachine1_trascon_count <= (main_sdram_bankmachine1_trascon_count - 1'd1);
			if ((main_sdram_bankmachine1_trascon_count == 1'd1)) begin
				main_sdram_bankmachine1_trascon_ready <= 1'd1;
			end
		end
	end
	builder_simsoc_bankmachine1_state <= builder_simsoc_bankmachine1_next_state;
	if (main_sdram_bankmachine2_row_close) begin
		main_sdram_bankmachine2_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine2_row_open) begin
			main_sdram_bankmachine2_row_opened <= 1'd1;
			main_sdram_bankmachine2_row <= main_sdram_bankmachine2_source_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
		main_sdram_bankmachine2_produce <= (main_sdram_bankmachine2_produce + 1'd1);
	end
	if (main_sdram_bankmachine2_do_read) begin
		main_sdram_bankmachine2_consume <= (main_sdram_bankmachine2_consume + 1'd1);
	end
	if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
		if ((~main_sdram_bankmachine2_do_read)) begin
			main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine2_do_read) begin
			main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready)) begin
		main_sdram_bankmachine2_pipe_valid_source_valid <= main_sdram_bankmachine2_pipe_valid_sink_valid;
		main_sdram_bankmachine2_pipe_valid_source_first <= main_sdram_bankmachine2_pipe_valid_sink_first;
		main_sdram_bankmachine2_pipe_valid_source_last <= main_sdram_bankmachine2_pipe_valid_sink_last;
		main_sdram_bankmachine2_pipe_valid_source_payload_we <= main_sdram_bankmachine2_pipe_valid_sink_payload_we;
		main_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
	end
	if (main_sdram_bankmachine2_twtpcon_valid) begin
		main_sdram_bankmachine2_twtpcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_twtpcon_ready)) begin
			main_sdram_bankmachine2_twtpcon_count <= (main_sdram_bankmachine2_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine2_trccon_valid) begin
		main_sdram_bankmachine2_trccon_count <= 3'd6;
		if (1'd0) begin
			main_sdram_bankmachine2_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_trccon_ready)) begin
			main_sdram_bankmachine2_trccon_count <= (main_sdram_bankmachine2_trccon_count - 1'd1);
			if ((main_sdram_bankmachine2_trccon_count == 1'd1)) begin
				main_sdram_bankmachine2_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine2_trascon_valid) begin
		main_sdram_bankmachine2_trascon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine2_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine2_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine2_trascon_ready)) begin
			main_sdram_bankmachine2_trascon_count <= (main_sdram_bankmachine2_trascon_count - 1'd1);
			if ((main_sdram_bankmachine2_trascon_count == 1'd1)) begin
				main_sdram_bankmachine2_trascon_ready <= 1'd1;
			end
		end
	end
	builder_simsoc_bankmachine2_state <= builder_simsoc_bankmachine2_next_state;
	if (main_sdram_bankmachine3_row_close) begin
		main_sdram_bankmachine3_row_opened <= 1'd0;
	end else begin
		if (main_sdram_bankmachine3_row_open) begin
			main_sdram_bankmachine3_row_opened <= 1'd1;
			main_sdram_bankmachine3_row <= main_sdram_bankmachine3_source_source_payload_addr[21:9];
		end
	end
	if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
		main_sdram_bankmachine3_produce <= (main_sdram_bankmachine3_produce + 1'd1);
	end
	if (main_sdram_bankmachine3_do_read) begin
		main_sdram_bankmachine3_consume <= (main_sdram_bankmachine3_consume + 1'd1);
	end
	if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
		if ((~main_sdram_bankmachine3_do_read)) begin
			main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level + 1'd1);
		end
	end else begin
		if (main_sdram_bankmachine3_do_read) begin
			main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level - 1'd1);
		end
	end
	if (((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready)) begin
		main_sdram_bankmachine3_pipe_valid_source_valid <= main_sdram_bankmachine3_pipe_valid_sink_valid;
		main_sdram_bankmachine3_pipe_valid_source_first <= main_sdram_bankmachine3_pipe_valid_sink_first;
		main_sdram_bankmachine3_pipe_valid_source_last <= main_sdram_bankmachine3_pipe_valid_sink_last;
		main_sdram_bankmachine3_pipe_valid_source_payload_we <= main_sdram_bankmachine3_pipe_valid_sink_payload_we;
		main_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
	end
	if (main_sdram_bankmachine3_twtpcon_valid) begin
		main_sdram_bankmachine3_twtpcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_twtpcon_ready)) begin
			main_sdram_bankmachine3_twtpcon_count <= (main_sdram_bankmachine3_twtpcon_count - 1'd1);
			if ((main_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
				main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine3_trccon_valid) begin
		main_sdram_bankmachine3_trccon_count <= 3'd6;
		if (1'd0) begin
			main_sdram_bankmachine3_trccon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_trccon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_trccon_ready)) begin
			main_sdram_bankmachine3_trccon_count <= (main_sdram_bankmachine3_trccon_count - 1'd1);
			if ((main_sdram_bankmachine3_trccon_count == 1'd1)) begin
				main_sdram_bankmachine3_trccon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_bankmachine3_trascon_valid) begin
		main_sdram_bankmachine3_trascon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_bankmachine3_trascon_ready <= 1'd1;
		end else begin
			main_sdram_bankmachine3_trascon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_bankmachine3_trascon_ready)) begin
			main_sdram_bankmachine3_trascon_count <= (main_sdram_bankmachine3_trascon_count - 1'd1);
			if ((main_sdram_bankmachine3_trascon_count == 1'd1)) begin
				main_sdram_bankmachine3_trascon_ready <= 1'd1;
			end
		end
	end
	builder_simsoc_bankmachine3_state <= builder_simsoc_bankmachine3_next_state;
	if ((~main_sdram_en0)) begin
		main_sdram_time0 <= 5'd31;
	end else begin
		if ((~main_sdram_max_time0)) begin
			main_sdram_time0 <= (main_sdram_time0 - 1'd1);
		end
	end
	if ((~main_sdram_en1)) begin
		main_sdram_time1 <= 4'd15;
	end else begin
		if ((~main_sdram_max_time1)) begin
			main_sdram_time1 <= (main_sdram_time1 - 1'd1);
		end
	end
	if (main_sdram_choose_cmd_ce) begin
		case (main_sdram_choose_cmd_grant)
			1'd0: begin
				if (main_sdram_choose_cmd_request[1]) begin
					main_sdram_choose_cmd_grant <= 1'd1;
				end else begin
					if (main_sdram_choose_cmd_request[2]) begin
						main_sdram_choose_cmd_grant <= 2'd2;
					end else begin
						if (main_sdram_choose_cmd_request[3]) begin
							main_sdram_choose_cmd_grant <= 2'd3;
						end
					end
				end
			end
			1'd1: begin
				if (main_sdram_choose_cmd_request[2]) begin
					main_sdram_choose_cmd_grant <= 2'd2;
				end else begin
					if (main_sdram_choose_cmd_request[3]) begin
						main_sdram_choose_cmd_grant <= 2'd3;
					end else begin
						if (main_sdram_choose_cmd_request[0]) begin
							main_sdram_choose_cmd_grant <= 1'd0;
						end
					end
				end
			end
			2'd2: begin
				if (main_sdram_choose_cmd_request[3]) begin
					main_sdram_choose_cmd_grant <= 2'd3;
				end else begin
					if (main_sdram_choose_cmd_request[0]) begin
						main_sdram_choose_cmd_grant <= 1'd0;
					end else begin
						if (main_sdram_choose_cmd_request[1]) begin
							main_sdram_choose_cmd_grant <= 1'd1;
						end
					end
				end
			end
			2'd3: begin
				if (main_sdram_choose_cmd_request[0]) begin
					main_sdram_choose_cmd_grant <= 1'd0;
				end else begin
					if (main_sdram_choose_cmd_request[1]) begin
						main_sdram_choose_cmd_grant <= 1'd1;
					end else begin
						if (main_sdram_choose_cmd_request[2]) begin
							main_sdram_choose_cmd_grant <= 2'd2;
						end
					end
				end
			end
		endcase
	end
	if (main_sdram_choose_req_ce) begin
		case (main_sdram_choose_req_grant)
			1'd0: begin
				if (main_sdram_choose_req_request[1]) begin
					main_sdram_choose_req_grant <= 1'd1;
				end else begin
					if (main_sdram_choose_req_request[2]) begin
						main_sdram_choose_req_grant <= 2'd2;
					end else begin
						if (main_sdram_choose_req_request[3]) begin
							main_sdram_choose_req_grant <= 2'd3;
						end
					end
				end
			end
			1'd1: begin
				if (main_sdram_choose_req_request[2]) begin
					main_sdram_choose_req_grant <= 2'd2;
				end else begin
					if (main_sdram_choose_req_request[3]) begin
						main_sdram_choose_req_grant <= 2'd3;
					end else begin
						if (main_sdram_choose_req_request[0]) begin
							main_sdram_choose_req_grant <= 1'd0;
						end
					end
				end
			end
			2'd2: begin
				if (main_sdram_choose_req_request[3]) begin
					main_sdram_choose_req_grant <= 2'd3;
				end else begin
					if (main_sdram_choose_req_request[0]) begin
						main_sdram_choose_req_grant <= 1'd0;
					end else begin
						if (main_sdram_choose_req_request[1]) begin
							main_sdram_choose_req_grant <= 1'd1;
						end
					end
				end
			end
			2'd3: begin
				if (main_sdram_choose_req_request[0]) begin
					main_sdram_choose_req_grant <= 1'd0;
				end else begin
					if (main_sdram_choose_req_request[1]) begin
						main_sdram_choose_req_grant <= 1'd1;
					end else begin
						if (main_sdram_choose_req_request[2]) begin
							main_sdram_choose_req_grant <= 2'd2;
						end
					end
				end
			end
		endcase
	end
	main_sdram_dfi_p0_cs_n <= 1'd0;
	main_sdram_dfi_p0_bank <= builder_array_muxed0;
	main_sdram_dfi_p0_address <= builder_array_muxed1;
	main_sdram_dfi_p0_cas_n <= (~builder_array_muxed2);
	main_sdram_dfi_p0_ras_n <= (~builder_array_muxed3);
	main_sdram_dfi_p0_we_n <= (~builder_array_muxed4);
	main_sdram_dfi_p0_rddata_en <= builder_array_muxed5;
	main_sdram_dfi_p0_wrdata_en <= builder_array_muxed6;
	if (main_sdram_trrdcon_valid) begin
		main_sdram_trrdcon_count <= 1'd1;
		if (1'd0) begin
			main_sdram_trrdcon_ready <= 1'd1;
		end else begin
			main_sdram_trrdcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_trrdcon_ready)) begin
			main_sdram_trrdcon_count <= (main_sdram_trrdcon_count - 1'd1);
			if ((main_sdram_trrdcon_count == 1'd1)) begin
				main_sdram_trrdcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_tccdcon_valid) begin
		main_sdram_tccdcon_count <= 1'd0;
		if (1'd1) begin
			main_sdram_tccdcon_ready <= 1'd1;
		end else begin
			main_sdram_tccdcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_tccdcon_ready)) begin
			main_sdram_tccdcon_count <= (main_sdram_tccdcon_count - 1'd1);
			if ((main_sdram_tccdcon_count == 1'd1)) begin
				main_sdram_tccdcon_ready <= 1'd1;
			end
		end
	end
	if (main_sdram_twtrcon_valid) begin
		main_sdram_twtrcon_count <= 3'd4;
		if (1'd0) begin
			main_sdram_twtrcon_ready <= 1'd1;
		end else begin
			main_sdram_twtrcon_ready <= 1'd0;
		end
	end else begin
		if ((~main_sdram_twtrcon_ready)) begin
			main_sdram_twtrcon_count <= (main_sdram_twtrcon_count - 1'd1);
			if ((main_sdram_twtrcon_count == 1'd1)) begin
				main_sdram_twtrcon_ready <= 1'd1;
			end
		end
	end
	builder_simsoc_multiplexer_state <= builder_simsoc_multiplexer_next_state;
	builder_simsoc_new_master_wdata_ready <= ((((1'd0 | ((builder_simsoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_wdata_ready)) | ((builder_simsoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_wdata_ready)) | ((builder_simsoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_wdata_ready)) | ((builder_simsoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_wdata_ready));
	builder_simsoc_new_master_rdata_valid0 <= ((((1'd0 | ((builder_simsoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_rdata_valid)) | ((builder_simsoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_rdata_valid)) | ((builder_simsoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_rdata_valid)) | ((builder_simsoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_rdata_valid));
	builder_simsoc_new_master_rdata_valid1 <= builder_simsoc_new_master_rdata_valid0;
	builder_simsoc_new_master_rdata_valid2 <= builder_simsoc_new_master_rdata_valid1;
	builder_simsoc_new_master_rdata_valid3 <= builder_simsoc_new_master_rdata_valid2;
	builder_simsoc_new_master_rdata_valid4 <= builder_simsoc_new_master_rdata_valid3;
	main_adr_offset_r <= main_wb_sdram_adr[1:0];
	builder_simsoc_fullmemorywe_state <= builder_simsoc_fullmemorywe_next_state;
	builder_simsoc_litedramnativeportconverter_state <= builder_simsoc_litedramnativeportconverter_next_state;
	if (main_wishbone_bridge_count_litedramnativeportconverter_next_value_ce) begin
		main_wishbone_bridge_count <= main_wishbone_bridge_count_litedramnativeportconverter_next_value;
	end
	if ((main_wishbone_bridge_wdata_converter_converter_source_valid & main_wishbone_bridge_wdata_converter_converter_source_ready)) begin
		if (main_wishbone_bridge_wdata_converter_converter_last) begin
			main_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
		end else begin
			main_wishbone_bridge_wdata_converter_converter_mux <= (main_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
		end
	end
	if (main_wishbone_bridge_rdata_converter_converter_source_ready) begin
		main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		if (((main_wishbone_bridge_rdata_converter_converter_demux == 2'd3) | main_wishbone_bridge_rdata_converter_converter_sink_last)) begin
			main_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
			main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
		end else begin
			main_wishbone_bridge_rdata_converter_converter_demux <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
		end
	end
	if ((main_wishbone_bridge_rdata_converter_converter_source_valid & main_wishbone_bridge_rdata_converter_converter_source_ready)) begin
		if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= main_wishbone_bridge_rdata_converter_converter_sink_first;
			main_wishbone_bridge_rdata_converter_converter_source_last <= main_wishbone_bridge_rdata_converter_converter_sink_last;
		end else begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
			main_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
		end
	end else begin
		if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
			main_wishbone_bridge_rdata_converter_converter_source_first <= (main_wishbone_bridge_rdata_converter_converter_sink_first | main_wishbone_bridge_rdata_converter_converter_source_first);
			main_wishbone_bridge_rdata_converter_converter_source_last <= (main_wishbone_bridge_rdata_converter_converter_sink_last | main_wishbone_bridge_rdata_converter_converter_source_last);
		end
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		case (main_wishbone_bridge_rdata_converter_converter_demux)
			1'd0: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[31:0] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			1'd1: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[63:32] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			2'd2: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[95:64] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
			2'd3: begin
				main_wishbone_bridge_rdata_converter_converter_source_payload_data[127:96] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
			end
		endcase
	end
	if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
		main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
	end
	builder_simsoc_fsm_state <= builder_simsoc_fsm_next_state;
	if (main_wishbone_bridge_aborted_fsm_next_value_ce) begin
		main_wishbone_bridge_aborted <= main_wishbone_bridge_aborted_fsm_next_value;
	end
	builder_simsoc_wishbone2csr_state <= builder_simsoc_wishbone2csr_next_state;
	if (builder_simsoc_dat_w_next_value_ce0) begin
		builder_simsoc_dat_w <= builder_simsoc_dat_w_next_value0;
	end
	if (builder_simsoc_adr_next_value_ce1) begin
		builder_simsoc_adr <= builder_simsoc_adr_next_value1;
	end
	if (builder_simsoc_we_next_value_ce2) begin
		builder_simsoc_we <= builder_simsoc_we_next_value2;
	end
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_reset0_re) begin
		main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
	end
	main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
	if (builder_csr_bankarray_csrbank0_scratch0_re) begin
		main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
	end
	main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
	main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_control0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_pi0_command0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= main_sdram_command_issue_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_pi0_address0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_dfii_pi0_rddata_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_dfii_control0_re) begin
		main_sdram_storage[3:0] <= builder_csr_bankarray_csrbank1_dfii_control0_r;
	end
	main_sdram_re <= builder_csr_bankarray_csrbank1_dfii_control0_re;
	if (builder_csr_bankarray_csrbank1_dfii_pi0_command0_re) begin
		main_sdram_command_storage[5:0] <= builder_csr_bankarray_csrbank1_dfii_pi0_command0_r;
	end
	main_sdram_command_re <= builder_csr_bankarray_csrbank1_dfii_pi0_command0_re;
	if (builder_csr_bankarray_csrbank1_dfii_pi0_address0_re) begin
		main_sdram_address_storage[12:0] <= builder_csr_bankarray_csrbank1_dfii_pi0_address0_r;
	end
	main_sdram_address_re <= builder_csr_bankarray_csrbank1_dfii_pi0_address0_re;
	if (builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_re) begin
		main_sdram_baddress_storage[1:0] <= builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_r;
	end
	main_sdram_baddress_re <= builder_csr_bankarray_csrbank1_dfii_pi0_baddress0_re;
	if (builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_re) begin
		main_sdram_wrdata_storage[31:0] <= builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_r;
	end
	main_sdram_wrdata_re <= builder_csr_bankarray_csrbank1_dfii_pi0_wrdata0_re;
	main_sdram_rddata_re <= builder_csr_bankarray_csrbank1_dfii_pi0_rddata_re;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank2_load0_re) begin
		main_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank2_load0_r;
	end
	main_timer_load_re <= builder_csr_bankarray_csrbank2_load0_re;
	if (builder_csr_bankarray_csrbank2_reload0_re) begin
		main_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank2_reload0_r;
	end
	main_timer_reload_re <= builder_csr_bankarray_csrbank2_reload0_re;
	if (builder_csr_bankarray_csrbank2_en0_re) begin
		main_timer_en_storage <= builder_csr_bankarray_csrbank2_en0_r;
	end
	main_timer_en_re <= builder_csr_bankarray_csrbank2_en0_re;
	if (builder_csr_bankarray_csrbank2_update_value0_re) begin
		main_timer_update_value_storage <= builder_csr_bankarray_csrbank2_update_value0_r;
	end
	main_timer_update_value_re <= builder_csr_bankarray_csrbank2_update_value0_re;
	main_timer_value_re <= builder_csr_bankarray_csrbank2_value_re;
	main_timer_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
	if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
		main_timer_pending_r <= builder_csr_bankarray_csrbank2_ev_pending_r;
	end
	main_timer_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
	if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
		main_timer_enable_storage <= builder_csr_bankarray_csrbank2_ev_enable0_r;
	end
	main_timer_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
	builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank3_sel) begin
		case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= main_uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxfull_w;
			end
		endcase
	end
	main_uart_txfull_re <= builder_csr_bankarray_csrbank3_txfull_re;
	main_uart_rxempty_re <= builder_csr_bankarray_csrbank3_rxempty_re;
	main_uart_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
	if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
		main_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank3_ev_pending_r;
	end
	main_uart_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
	if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
		main_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank3_ev_enable0_r;
	end
	main_uart_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
	main_uart_txempty_re <= builder_csr_bankarray_csrbank3_txempty_re;
	main_uart_rxfull_re <= builder_csr_bankarray_csrbank3_rxfull_re;
	if (sys_rst) begin
		main_reset_storage <= 2'd0;
		main_reset_re <= 1'd0;
		main_scratch_storage <= 32'd305419896;
		main_scratch_re <= 1'd0;
		main_bus_errors_re <= 1'd0;
		main_bus_errors <= 32'd0;
		main_simsoc_ram_bus_ack <= 1'd0;
		main_ram_bus_ram_bus_ack <= 1'd0;
		main_uart_txfull_re <= 1'd0;
		main_uart_rxempty_re <= 1'd0;
		main_uart_tx_pending <= 1'd0;
		main_uart_tx_trigger_d <= 1'd0;
		main_uart_rx_pending <= 1'd0;
		main_uart_rx_trigger_d <= 1'd0;
		main_uart_status_re <= 1'd0;
		main_uart_pending_re <= 1'd0;
		main_uart_pending_r <= 2'd0;
		main_uart_enable_storage <= 2'd0;
		main_uart_enable_re <= 1'd0;
		main_uart_txempty_re <= 1'd0;
		main_uart_rxfull_re <= 1'd0;
		main_uart_tx_fifo_readable <= 1'd0;
		main_uart_tx_fifo_level0 <= 5'd0;
		main_uart_tx_fifo_produce <= 4'd0;
		main_uart_tx_fifo_consume <= 4'd0;
		main_uart_rx_fifo_readable <= 1'd0;
		main_uart_rx_fifo_level0 <= 5'd0;
		main_uart_rx_fifo_produce <= 4'd0;
		main_uart_rx_fifo_consume <= 4'd0;
		main_timer_load_storage <= 32'd0;
		main_timer_load_re <= 1'd0;
		main_timer_reload_storage <= 32'd0;
		main_timer_reload_re <= 1'd0;
		main_timer_en_storage <= 1'd0;
		main_timer_en_re <= 1'd0;
		main_timer_update_value_storage <= 1'd0;
		main_timer_update_value_re <= 1'd0;
		main_timer_value_status <= 32'd0;
		main_timer_value_re <= 1'd0;
		main_timer_zero_pending <= 1'd0;
		main_timer_zero_trigger_d <= 1'd0;
		main_timer_status_re <= 1'd0;
		main_timer_pending_re <= 1'd0;
		main_timer_pending_r <= 1'd0;
		main_timer_enable_storage <= 1'd0;
		main_timer_enable_re <= 1'd0;
		main_timer_value <= 32'd0;
		main_bankmodel0_active <= 1'd0;
		main_bankmodel0_row <= 13'd0;
		main_bankmodel1_active <= 1'd0;
		main_bankmodel1_row <= 13'd0;
		main_bankmodel2_active <= 1'd0;
		main_bankmodel2_row <= 13'd0;
		main_bankmodel3_active <= 1'd0;
		main_bankmodel3_row <= 13'd0;
		main_new_banks_read0 <= 1'd0;
		main_new_banks_read_data0 <= 32'd0;
		main_new_banks_read1 <= 1'd0;
		main_new_banks_read_data1 <= 32'd0;
		main_new_banks_read2 <= 1'd0;
		main_new_banks_read_data2 <= 32'd0;
		main_new_banks_read3 <= 1'd0;
		main_new_banks_read_data3 <= 32'd0;
		main_sdram_storage <= 4'd1;
		main_sdram_re <= 1'd0;
		main_sdram_command_storage <= 6'd0;
		main_sdram_command_re <= 1'd0;
		main_sdram_address_re <= 1'd0;
		main_sdram_baddress_re <= 1'd0;
		main_sdram_wrdata_re <= 1'd0;
		main_sdram_rddata_status <= 32'd0;
		main_sdram_rddata_re <= 1'd0;
		main_sdram_dfi_p0_address <= 13'd0;
		main_sdram_dfi_p0_bank <= 2'd0;
		main_sdram_dfi_p0_cas_n <= 1'd1;
		main_sdram_dfi_p0_cs_n <= 1'd1;
		main_sdram_dfi_p0_ras_n <= 1'd1;
		main_sdram_dfi_p0_we_n <= 1'd1;
		main_sdram_dfi_p0_wrdata_en <= 1'd0;
		main_sdram_dfi_p0_rddata_en <= 1'd0;
		main_sdram_cmd_payload_a <= 13'd0;
		main_sdram_cmd_payload_ba <= 2'd0;
		main_sdram_cmd_payload_cas <= 1'd0;
		main_sdram_cmd_payload_ras <= 1'd0;
		main_sdram_cmd_payload_we <= 1'd0;
		main_sdram_timer_count1 <= 10'd781;
		main_sdram_postponer_req_o <= 1'd0;
		main_sdram_postponer_count <= 1'd0;
		main_sdram_sequencer_done1 <= 1'd0;
		main_sdram_sequencer_counter <= 4'd0;
		main_sdram_sequencer_count <= 1'd0;
		main_sdram_bankmachine0_level <= 4'd0;
		main_sdram_bankmachine0_produce <= 3'd0;
		main_sdram_bankmachine0_consume <= 3'd0;
		main_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
		main_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
		main_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
		main_sdram_bankmachine0_row <= 13'd0;
		main_sdram_bankmachine0_row_opened <= 1'd0;
		main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine0_twtpcon_count <= 3'd0;
		main_sdram_bankmachine0_trccon_ready <= 1'd0;
		main_sdram_bankmachine0_trccon_count <= 3'd0;
		main_sdram_bankmachine0_trascon_ready <= 1'd0;
		main_sdram_bankmachine0_trascon_count <= 3'd0;
		main_sdram_bankmachine1_level <= 4'd0;
		main_sdram_bankmachine1_produce <= 3'd0;
		main_sdram_bankmachine1_consume <= 3'd0;
		main_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
		main_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
		main_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
		main_sdram_bankmachine1_row <= 13'd0;
		main_sdram_bankmachine1_row_opened <= 1'd0;
		main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine1_twtpcon_count <= 3'd0;
		main_sdram_bankmachine1_trccon_ready <= 1'd0;
		main_sdram_bankmachine1_trccon_count <= 3'd0;
		main_sdram_bankmachine1_trascon_ready <= 1'd0;
		main_sdram_bankmachine1_trascon_count <= 3'd0;
		main_sdram_bankmachine2_level <= 4'd0;
		main_sdram_bankmachine2_produce <= 3'd0;
		main_sdram_bankmachine2_consume <= 3'd0;
		main_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
		main_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
		main_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
		main_sdram_bankmachine2_row <= 13'd0;
		main_sdram_bankmachine2_row_opened <= 1'd0;
		main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine2_twtpcon_count <= 3'd0;
		main_sdram_bankmachine2_trccon_ready <= 1'd0;
		main_sdram_bankmachine2_trccon_count <= 3'd0;
		main_sdram_bankmachine2_trascon_ready <= 1'd0;
		main_sdram_bankmachine2_trascon_count <= 3'd0;
		main_sdram_bankmachine3_level <= 4'd0;
		main_sdram_bankmachine3_produce <= 3'd0;
		main_sdram_bankmachine3_consume <= 3'd0;
		main_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
		main_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
		main_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
		main_sdram_bankmachine3_row <= 13'd0;
		main_sdram_bankmachine3_row_opened <= 1'd0;
		main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
		main_sdram_bankmachine3_twtpcon_count <= 3'd0;
		main_sdram_bankmachine3_trccon_ready <= 1'd0;
		main_sdram_bankmachine3_trccon_count <= 3'd0;
		main_sdram_bankmachine3_trascon_ready <= 1'd0;
		main_sdram_bankmachine3_trascon_count <= 3'd0;
		main_sdram_choose_cmd_grant <= 2'd0;
		main_sdram_choose_req_grant <= 2'd0;
		main_sdram_trrdcon_ready <= 1'd0;
		main_sdram_trrdcon_count <= 1'd0;
		main_sdram_tccdcon_ready <= 1'd0;
		main_sdram_tccdcon_count <= 1'd0;
		main_sdram_twtrcon_ready <= 1'd0;
		main_sdram_twtrcon_count <= 3'd0;
		main_sdram_time0 <= 5'd0;
		main_sdram_time1 <= 4'd0;
		main_wishbone_bridge_count <= 2'd0;
		main_wishbone_bridge_wdata_converter_converter_mux <= 2'd0;
		main_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
		main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 3'd0;
		main_wishbone_bridge_rdata_converter_converter_demux <= 2'd0;
		main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
		main_wishbone_bridge_aborted <= 1'd0;
		builder_simsoc_we <= 1'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 4'd0;
		builder_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_simsoc_refresher_state <= 2'd0;
		builder_simsoc_bankmachine0_state <= 3'd0;
		builder_simsoc_bankmachine1_state <= 3'd0;
		builder_simsoc_bankmachine2_state <= 3'd0;
		builder_simsoc_bankmachine3_state <= 3'd0;
		builder_simsoc_multiplexer_state <= 3'd0;
		builder_simsoc_new_master_wdata_ready <= 1'd0;
		builder_simsoc_new_master_rdata_valid0 <= 1'd0;
		builder_simsoc_new_master_rdata_valid1 <= 1'd0;
		builder_simsoc_new_master_rdata_valid2 <= 1'd0;
		builder_simsoc_new_master_rdata_valid3 <= 1'd0;
		builder_simsoc_new_master_rdata_valid4 <= 1'd0;
		builder_simsoc_fullmemorywe_state <= 2'd0;
		builder_simsoc_litedramnativeportconverter_state <= 1'd0;
		builder_simsoc_fsm_state <= 2'd0;
		builder_simsoc_wishbone2csr_state <= 2'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6235-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6234];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[main_simsoc_adr];
end
assign main_simsoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (main_ram_we[0])
		sram[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		sram[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		sram[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		sram[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	sram_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory mem_1: 4194304-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] mem_1[0:4194303];
initial begin
	$readmemh("sim_mem_1.init", mem_1);
end
reg [21:0] mem_1_adr0;
always @(posedge sys_clk_1) begin
	if (main_bankmodel0_write_port_we[0])
		mem_1[main_bankmodel0_write_port_adr][7:0] <= main_bankmodel0_write_port_dat_w[7:0];
	if (main_bankmodel0_write_port_we[1])
		mem_1[main_bankmodel0_write_port_adr][15:8] <= main_bankmodel0_write_port_dat_w[15:8];
	if (main_bankmodel0_write_port_we[2])
		mem_1[main_bankmodel0_write_port_adr][23:16] <= main_bankmodel0_write_port_dat_w[23:16];
	if (main_bankmodel0_write_port_we[3])
		mem_1[main_bankmodel0_write_port_adr][31:24] <= main_bankmodel0_write_port_dat_w[31:24];
	mem_1_adr0 <= main_bankmodel0_write_port_adr;
end
always @(posedge sys_clk_1) begin
end
assign main_bankmodel0_write_port_dat_r = mem_1[mem_1_adr0];
assign main_bankmodel0_read_port_dat_r = mem_1[main_bankmodel0_read_port_adr];


//------------------------------------------------------------------------------
// Memory mem_2: 4194304-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] mem_2[0:4194303];
initial begin
	$readmemh("sim_mem_2.init", mem_2);
end
reg [21:0] mem_2_adr0;
always @(posedge sys_clk_1) begin
	if (main_bankmodel1_write_port_we[0])
		mem_2[main_bankmodel1_write_port_adr][7:0] <= main_bankmodel1_write_port_dat_w[7:0];
	if (main_bankmodel1_write_port_we[1])
		mem_2[main_bankmodel1_write_port_adr][15:8] <= main_bankmodel1_write_port_dat_w[15:8];
	if (main_bankmodel1_write_port_we[2])
		mem_2[main_bankmodel1_write_port_adr][23:16] <= main_bankmodel1_write_port_dat_w[23:16];
	if (main_bankmodel1_write_port_we[3])
		mem_2[main_bankmodel1_write_port_adr][31:24] <= main_bankmodel1_write_port_dat_w[31:24];
	mem_2_adr0 <= main_bankmodel1_write_port_adr;
end
always @(posedge sys_clk_1) begin
end
assign main_bankmodel1_write_port_dat_r = mem_2[mem_2_adr0];
assign main_bankmodel1_read_port_dat_r = mem_2[main_bankmodel1_read_port_adr];


//------------------------------------------------------------------------------
// Memory mem_3: 4194304-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] mem_3[0:4194303];
initial begin
	$readmemh("sim_mem_3.init", mem_3);
end
reg [21:0] mem_3_adr0;
always @(posedge sys_clk_1) begin
	if (main_bankmodel2_write_port_we[0])
		mem_3[main_bankmodel2_write_port_adr][7:0] <= main_bankmodel2_write_port_dat_w[7:0];
	if (main_bankmodel2_write_port_we[1])
		mem_3[main_bankmodel2_write_port_adr][15:8] <= main_bankmodel2_write_port_dat_w[15:8];
	if (main_bankmodel2_write_port_we[2])
		mem_3[main_bankmodel2_write_port_adr][23:16] <= main_bankmodel2_write_port_dat_w[23:16];
	if (main_bankmodel2_write_port_we[3])
		mem_3[main_bankmodel2_write_port_adr][31:24] <= main_bankmodel2_write_port_dat_w[31:24];
	mem_3_adr0 <= main_bankmodel2_write_port_adr;
end
always @(posedge sys_clk_1) begin
end
assign main_bankmodel2_write_port_dat_r = mem_3[mem_3_adr0];
assign main_bankmodel2_read_port_dat_r = mem_3[main_bankmodel2_read_port_adr];


//------------------------------------------------------------------------------
// Memory mem_4: 4194304-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
// Port 1 | Read: Async | Write: ---- | 
reg [31:0] mem_4[0:4194303];
initial begin
	$readmemh("sim_mem_4.init", mem_4);
end
reg [21:0] mem_4_adr0;
always @(posedge sys_clk_1) begin
	if (main_bankmodel3_write_port_we[0])
		mem_4[main_bankmodel3_write_port_adr][7:0] <= main_bankmodel3_write_port_dat_w[7:0];
	if (main_bankmodel3_write_port_we[1])
		mem_4[main_bankmodel3_write_port_adr][15:8] <= main_bankmodel3_write_port_dat_w[15:8];
	if (main_bankmodel3_write_port_we[2])
		mem_4[main_bankmodel3_write_port_adr][23:16] <= main_bankmodel3_write_port_dat_w[23:16];
	if (main_bankmodel3_write_port_we[3])
		mem_4[main_bankmodel3_write_port_adr][31:24] <= main_bankmodel3_write_port_dat_w[31:24];
	mem_4_adr0 <= main_bankmodel3_write_port_adr;
end
always @(posedge sys_clk_1) begin
end
assign main_bankmodel3_write_port_dat_r = mem_4[mem_4_adr0];
assign main_bankmodel3_read_port_dat_r = mem_4[main_bankmodel3_read_port_adr];


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:7];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk_1) begin
	if (main_sdram_bankmachine0_wrport_we)
		storage_2[main_sdram_bankmachine0_wrport_adr] <= main_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk_1) begin
end
assign main_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign main_sdram_bankmachine0_rdport_dat_r = storage_2[main_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:7];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk_1) begin
	if (main_sdram_bankmachine1_wrport_we)
		storage_3[main_sdram_bankmachine1_wrport_adr] <= main_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk_1) begin
end
assign main_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign main_sdram_bankmachine1_rdport_dat_r = storage_3[main_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:7];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk_1) begin
	if (main_sdram_bankmachine2_wrport_we)
		storage_4[main_sdram_bankmachine2_wrport_adr] <= main_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk_1) begin
end
assign main_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign main_sdram_bankmachine2_rdport_dat_r = storage_4[main_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:7];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk_1) begin
	if (main_sdram_bankmachine3_wrport_we)
		storage_5[main_sdram_bankmachine3_wrport_adr] <= main_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk_1) begin
end
assign main_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign main_sdram_bankmachine3_rdport_dat_r = storage_5[main_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 512-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 24 
reg [23:0] tag_mem[0:511];
reg [8:0] tag_mem_adr0;
always @(posedge sys_clk_1) begin
	if (main_tag_port_we)
		tag_mem[main_tag_port_adr] <= main_tag_port_dat_w;
	tag_mem_adr0 <= main_tag_port_adr;
end
assign main_tag_port_dat_r = tag_mem[tag_mem_adr0];


VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusWishbone_ACK(main_dbus_ack),
	.dBusWishbone_DAT_MISO(main_dbus_dat_r),
	.dBusWishbone_ERR(main_dbus_err),
	.externalInterruptArray(main_interrupt),
	.externalResetVector(main_vexriscv),
	.iBusWishbone_ACK(main_ibus_ack),
	.iBusWishbone_DAT_MISO(main_ibus_dat_r),
	.iBusWishbone_ERR(main_ibus_err),
	.reset((sys_rst | main_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(main_dbus_adr),
	.dBusWishbone_BTE(main_dbus_bte),
	.dBusWishbone_CTI(main_dbus_cti),
	.dBusWishbone_CYC(main_dbus_cyc),
	.dBusWishbone_DAT_MOSI(main_dbus_dat_w),
	.dBusWishbone_SEL(main_dbus_sel),
	.dBusWishbone_STB(main_dbus_stb),
	.dBusWishbone_WE(main_dbus_we),
	.iBusWishbone_ADR(main_ibus_adr),
	.iBusWishbone_BTE(main_ibus_bte),
	.iBusWishbone_CTI(main_ibus_cti),
	.iBusWishbone_CYC(main_ibus_cyc),
	.iBusWishbone_DAT_MOSI(main_ibus_dat_w),
	.iBusWishbone_SEL(main_ibus_sel),
	.iBusWishbone_STB(main_ibus_stb),
	.iBusWishbone_WE(main_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:511];
reg [8:0] data_mem_grain0_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[0])
		data_mem_grain0[main_data_port_adr] <= main_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:511];
reg [8:0] data_mem_grain1_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[1])
		data_mem_grain1[main_data_port_adr] <= main_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:511];
reg [8:0] data_mem_grain2_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[2])
		data_mem_grain2[main_data_port_adr] <= main_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:511];
reg [8:0] data_mem_grain3_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[3])
		data_mem_grain3[main_data_port_adr] <= main_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:511];
reg [8:0] data_mem_grain4_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[4])
		data_mem_grain4[main_data_port_adr] <= main_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:511];
reg [8:0] data_mem_grain5_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[5])
		data_mem_grain5[main_data_port_adr] <= main_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:511];
reg [8:0] data_mem_grain6_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[6])
		data_mem_grain6[main_data_port_adr] <= main_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:511];
reg [8:0] data_mem_grain7_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[7])
		data_mem_grain7[main_data_port_adr] <= main_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:511];
reg [8:0] data_mem_grain8_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[8])
		data_mem_grain8[main_data_port_adr] <= main_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:511];
reg [8:0] data_mem_grain9_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[9])
		data_mem_grain9[main_data_port_adr] <= main_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:511];
reg [8:0] data_mem_grain10_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[10])
		data_mem_grain10[main_data_port_adr] <= main_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:511];
reg [8:0] data_mem_grain11_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[11])
		data_mem_grain11[main_data_port_adr] <= main_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:511];
reg [8:0] data_mem_grain12_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[12])
		data_mem_grain12[main_data_port_adr] <= main_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:511];
reg [8:0] data_mem_grain13_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[13])
		data_mem_grain13[main_data_port_adr] <= main_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:511];
reg [8:0] data_mem_grain14_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[14])
		data_mem_grain14[main_data_port_adr] <= main_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:511];
reg [8:0] data_mem_grain15_adr0;
always @(posedge sys_clk_1) begin
	if (main_data_port_we[15])
		data_mem_grain15[main_data_port_adr] <= main_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-10-19 13:18:41.
//------------------------------------------------------------------------------
